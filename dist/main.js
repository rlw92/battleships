(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>E,zf:()=>S,o5:()=>V,o7:()=>Y,bF:()=>q,P4:()=>N,VL:()=>L,hJ:()=>w,yR:()=>B,He:()=>I,w7:()=>A,q2:()=>x,UX:()=>H,sq:()=>b,t:()=>O,Nn:()=>M});const t={createGrids:(e,t,n)=>{let o=document.createElement("div");o.style.padding="10px",o.style.border=0===n||0===t?"none":"solid black 2px",o.textContent=n,o.style.textAlign="center",0===n&&"0"===e?o.textContent=t:0===t&&"0"!=e&&(o.textContent=e),o.dataset.hit="No",o.dataset.P1hit="N",o.dataset.P2hit="N",o.dataset.letter=e,o.dataset.number=t,o.classList.add("cell"),o.setAttribute("id",o.dataset.letter+o.dataset.number),document.getElementById("gameboard1").appendChild(o)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function n(e,t,n,o){let l=[];if("V"===o){let o=11-n;t>o&&(t=o);for(let o=1;o<n+1;o++)l.push(e+t++)}else if("H"===o){let o=e.charCodeAt(0),r=75-n;o>r&&(o=r),console.log(o),console.log(r);for(let e=1;e<n+1;e++)l.push(String.fromCharCode(o++)+t)}return l}function o(e,t){let n=e,o=t,l=0;for(let e=0;e<o.length;e++)for(let t=0;t<n.length;t++)for(let r=0;r<n[t].coordinates.length;r++)n[t].coordinates[r]===o[e]&&l++;return l=l>0?"Y":"N",l}function l(e,t){this.name=e,this.coordinates=t,this.hitShip=t=>{if(alert("Struck the "+e+" ship"),"Y"===S&&N===A[1]){alert("well done computer"),alert(t+" has been hit.");for(let n=0;n<V.length;n++)e===V[n].name&&(V[n].coordinates.push(t),0===V[n].functionCount?V[n].functionCount++:V[n].functionCount>0&&V[n].functionCount)}},this.isSunk=()=>{if(0===t.length&&(alert("Sunk the "+e+" ship"),"Y"===S&&N===A[1])){alert("Great Work computer"),alert(e+" has been sunk");for(let t=0;t<V.length;t++)e===V[t].name&&(V[t].sunk="Y")}}}let r;const s=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,s=e.target.dataset.number,a=new l("Carrier",n(o,s,2,Y));return"0"===s?console.log("Stay in the grid."):(N===A[0]?(t=L,r="p1c"):N===A[1]&&(t=B,r="p2c"),t.push(a)),t},a=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Battleship",n(s,a,3,Y));return"0"===a?console.log("Stay in the grid."):(N===A[0]?(t=L,r="p1c"):N===A[1]&&(t=B,r="p2c"),"Y"===o(t,n(s,a,3,Y))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},i=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Cruiser",n(s,a,4,Y));return"0"===a?console.log("Stay in the grid."):(N===A[0]?(t=L,r="p1c"):N===A[1]&&(t=B,r="p2c"),"Y"===o(t,n(s,a,4,Y))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},c=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Submarine",n(s,a,5,Y));return"0"===a?console.log("Stay in the grid."):(N===A[0]?(t=L,r="p1c"):N===A[1]&&(t=B,r="p2c"),"Y"===o(t,n(s,a,5,Y))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},d=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Destroyer",n(s,a,6,Y));return"0"===a?console.log("Stay in the grid."):(N===A[0]?(t=L,r="p1c"):N===A[1]&&(t=B,r="p2c"),"Y"===o(t,n(s,a,6,Y))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},u=function(e){let t=e.target.dataset.number,n=e.target.dataset.letter,o="blue";if("V"===Y){let e=11-b;t>e&&(t=e),o="0"===t?"white":"grey";for(let e=0;e<b;e++)document.getElementById(n+(+t+e)).style.backgroundColor=o}else if("H"===Y){let e=n.charCodeAt(0),o=75-b;e>o&&(e=o);for(let n=0;n<b;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.backgroundColor="white";let t=e.target.dataset.number,n=e.target.dataset.letter,o=n+t;if(console.log(o),"V"===Y){let e=11-b;t>e&&(t=e);for(let e=0;e<b;e++)document.getElementById(n+(+t+e)).style.backgroundColor="white"}else if("H"===Y){let e=n.charCodeAt(0),o=75-b;e>o&&(e=o);for(let n=0;n<b;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}},h=function(){let e=w;N===A[0]?e=w:N===A[1]&&(e=I);for(let t=0;t<e.length;t++)document.getElementById(e[t]).style.backgroundColor="red"},m=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},y=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},f=function(e){N===A[0]?E=e.target.dataset.P1hit:N===A[1]&&(E=e.target.dataset.P2hit),"Y"===E?e.target.style.backgroundColor="red":"N"===E&&(e.target.style.backgroundColor="white")},p=function(){let e=L;N===A[0]?(e=L,console.log(e)):N===A[1]&&(e=B,console.log(e));for(let t=0;t<e.length;t++)for(let n=0;n<e[t].coordinates.length;n++)document.getElementById(e[t].coordinates[n]).style.backgroundColor="grey"},C=(()=>{var e=document.getElementById("myModal"),t=document.getElementById("myBtn");let n=document.getElementById("para1"),o=document.getElementById("para2");document.getElementsByClassName("close")[0];let l=document.getElementById("PSbuttons");l.style.display="none";let r=document.getElementById("compHit");function s(){e.style.display="none"}r.style.display="none",t.onclick=function(){e.style.display="None"};let a=document.getElementById("frnd"),i=document.getElementById("comp");return{showModule:function(){e.style.display="block",n.textContent="CHANGE PLACES!",o.textContent="Click button when ready.",l.style.display="none",t.style.display="block"},playerSelect:function(){e.style.display="block",n.textContent="Are you playing with a friend or against our AI?",t.style.display="none",document.querySelector(".close").style.display="none",l.style.display="block",a.addEventListener("click",(()=>{S="N",e.style.display="none"})),i.addEventListener("click",(()=>{S="Y",e.style.display="none"}))},compHitModal:function(){e.style.display="block",n.textContent="Please click the button below to activate the AI choice!",t.style.display="none",r.style.display="block",document.querySelector(".close").style.display="none",l.style.display="none",r.addEventListener("click",q),r.addEventListener("click",s)},closeModal:s}})(),k=(()=>{const e=(e,t)=>{let n,o=0;for(let n=0;n<t.length;n++)e===t[n]&&o++;return n=o>0?"Y":"N",n},t=(t,o)=>{let l,r=t.slice(0,1),s=t.slice(1,3),a=r.charCodeAt(0),i=String.fromCharCode(++a),c=0;for(;c<=10;){if(10===c){l=n(t,o);break}if("N"===e(i+s,o))i=String.fromCharCode(++a),c++;else if("Y"===e(i+s,o)){l=i+s;break}}return l},n=(t,n)=>{let l,r=t.slice(0,1),s=t.slice(1,3),a=r.charCodeAt(0),i=String.fromCharCode(--a),c=0;for(;c<=10;){if(10===c){l=o(t,n);break}if("N"===e(i+s,n))i=String.fromCharCode(--a),c++;else if("Y"===e(i+s,n)){l=i+s;break}}return l},o=(t,n)=>{let o,r=t.slice(0,1),s=t.slice(1,3),a=parseInt(s),i=++a,c=0;for(;c<=10;){if(10===c){o=l(t,n);break}if("N"===e(r+i,n))i=++a,c++;else if("Y"===e(r+i,n)){o=r+i;break}}return o},l=(n,o,l)=>{let r,s=n.slice(0,1),a=n.slice(1,3),i=parseInt(a),c=--i,d=0;for(;d<=10;){if(10===d){r=t(n,o);break}if("N"===e(s+c,o))c=--i,d++;else if("Y"===e(s+c,o)){r=s+c;break}}return r};return{moveDown:t,moveUp:n,moveFwd:o,moveBck:l,match:e}})(),v=(()=>{function e(e,t){return Math.floor(Math.random()*(t-e+1)+e)}return{hit:function(){let t;console.log(H),console.log(V);let n=0;for(;n<=V.length;){if(n===V.length){alert("Computer is choosing it's target..."),x=e(0,M.length-1);break}if(V[n].coordinates.length>0&&"N"===V[n].sunk){alert(V[n].name);let e=V[n],o=e.coordinates[e.coordinates.length-1];t=V[n].functionCount;let l=V[n].sunk;if(alert(t),1===t&&"N"===l){let e=k.moveDown(o,M);alert(e),x=M.indexOf(e)}else if(2===t&&"N"===l){let e=k.moveUp(o,M);alert(e),x=M.indexOf(e)}else if(3===t&&"N"===l){let e=k.moveFwd(o,M);alert(e),x=M.indexOf(e)}else if(4===t&&"N"===l){let e=k.moveBck(o,M);alert(e),x=M.indexOf(e)}break}n++}let o=M[x];return M.splice(x,1),console.log("Random no: "+x),console.log("Length: "+M.length),console.log(M),o},selectCarrier:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=B,c=new l("Carrier",n(r,s,2,a));"Y"===o(i,n(r,s,2,a))?v.selectCarrier():(i.push(c),v.selectBattleship())},selectBattleship:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=B,c=new l("Battleship",n(r,s,3,a));"Y"===o(i,n(r,s,3,a))?v.selectBattleship():(i.push(c),v.selectCruiser())},selectCruiser:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=B,c=new l("Cruiser",n(r,s,4,a));"Y"===o(i,n(r,s,4,a))?v.selectCruiser():(i.push(c),v.selectSubmarine())},selectSubmarine:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=B,c=new l("Submarine",n(r,s,5,a));"Y"===o(i,n(r,s,5,a))?v.selectSubmarine():(i.push(c),v.selectDestroyer())},selectDestroyer:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=B,c=new l("Destroyer",n(r,s,6,a));"Y"===o(i,n(r,s,6,a))?v.selectDestroyer():(i.push(c),O())},randomIntFromInterval:e,targetArray:function(){for(let e=65;e<75;e++)for(let t=1;t<11;t++)M.push(String.fromCharCode(e)+t)}}})();let b,E,S="N",L=[],B=[],w=[],I=[],Y="V",A=["player1","player2"],N=A[0],P=L;N===A[0]?P=L:N===A[1]&&(P=B),document.getElementById("pip").textContent=N;let x,M=[],H=0;v.targetArray(),console.log(M),console.log("YERT");let V=[{name:"Carrier",coordinates:[],sunk:"N",functionCount:0},{name:"Battleship",coordinates:[],sunk:"N",functionCount:0},{name:"Cruiser",coordinates:[],sunk:"N",functionCount:0},{name:"Submarine",coordinates:[],sunk:"N",functionCount:0},{name:"Destroyer",coordinates:[],sunk:"N",functionCount:0}];document.getElementById("Chnge").addEventListener("click",(()=>{"V"===Y?(Y="H",document.getElementById("position").textContent="Horizontal"):"H"===Y&&(Y="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("mouseover",(()=>{m(),p()})),document.getElementById("shwshipos").addEventListener("mouseleave",(()=>{m(),h()})),console.log("HEYEE");const G=()=>{let e;e="Y"===S?C.compHitModal():C.showModule(),N===A[0]?(N=A[1],P=B,document.getElementById("pip").textContent=N):N===A[1]?(N=A[0],P=L,document.getElementById("pip").textContent=N):(N=A[0],P=B,document.getElementById("pip").textContent=N),m(),h()};function q(e){console.log(e.target.dataset.letter),console.log(N);let t,n,o,l=L,r=w,s=0;if(console.log(s),"Y"===S&&N===A[1]?(o=v.hit(),alert("Computer has struck Tile: "+o)):(t=e.target.dataset.letter,n=e.target.dataset.number,o=t+n),console.log(o),console.log(l.length),N===A[0]?(l=B,r=w,E=e.target.dataset.P1hit):N===A[1]&&"Y"!=S?(l=L,r=I,E=e.target.dataset.P2hit):N===A[1]&&"Y"===S&&(l=L,r=I),"0"===n)console.log("Stay in the grid.");else if("Y"===E)console.log("Already been hit, try again.");else{N===A[0]?(l=B,r=w,E=e.target.dataset.P1hit="Y"):N===A[1]&&(l=L,r=I,E=e.target.dataset.P2hit="Y");for(let e=0;e<l.length;e++)for(let t=0;t<l[e].coordinates.length;t++)l[e].coordinates[t]===o&&(console.log(l[e].coordinates),l[e].coordinates.splice(t,1),l[e].hitShip(o),l[e].isSunk(),++s,D(),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));if(r.push(o),console.log("P1 strikes: "+w),console.log("P2 strikes: "+I),0===s&&(alert("MISSED"),"Y"===S&&N===A[1])){let e=0;for(;e<V.length;){if(V[e].functionCount>0){V[e].functionCount++;break}e++}}G()}}function D(){let e,t=0,n=L;N===A[0]?(n=B,e="Player One"):N===A[1]&&(n=L,e="Player Two");for(let e=0;e<n.length;e++)0===n[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function O(){if(P.length>4)if("Y"===S){alert("Computer is choosing battle positions"),b=1;let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";T()}else{b=1,G();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",O),e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";T()}}function T(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",q),e[t].style.backgroundColor="white",e[t].removeEventListener("mouseover",u),e[t].removeEventListener("mouseleave",g),e[t].addEventListener("mouseover",y),e[t].addEventListener("mouseleave",f)}console.log("OIL"),console.log("Nnnnn");const F={p1carrierShip:function(){let e=document.querySelectorAll(".cell");b=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",s),e[t].addEventListener("click",F.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){if(P.length>0){let e=document.querySelectorAll(".cell");b=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",F.p1battleShip),e[t].addEventListener("click",a),e[t].addEventListener("click",F.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1cruiserShip:function(){if(P.length>1){console.log(P);let e=document.querySelectorAll(".cell");b=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",F.p1cruiserShip),e[t].addEventListener("click",i),e[t].addEventListener("click",F.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1submarineShip:function(){if(P.length>2){let e=document.querySelectorAll(".cell");b=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",F.p1submarineShip),e[t].addEventListener("click",c),e[t].addEventListener("click",F.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1destroyerShip:function(){if(P.length>3){let e=document.querySelectorAll(".cell");b=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",F.p1destroyerShip),e[t].addEventListener("click",d),N===A[1]?e[t].addEventListener("click",O):N===A[0]&&e[t].addEventListener("click",F.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},loop:function(){if(P.length>4)if("Y"===S){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",F.loop),e[t].style.backgroundColor="white";v.selectCarrier()}else{G();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",F.loop),e[t].style.backgroundColor="white";F.p1carrierShip()}}};C.playerSelect(),t.createGameboard(),F.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,