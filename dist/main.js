(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o7:()=>v,P4:()=>h,VL:()=>p,yR:()=>g,w7:()=>E,sq:()=>m});const t={createGrids:(e,t,r)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===r||0===t?"none":"solid black 2px",n.textContent=r,n.style.textAlign="center",0===r&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.hit,n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function r(e,t,r,n){let l=[];if("V"===n){let n=11-r;t>n&&(t=n);for(let n=1;n<r+1;n++)l.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),o=75-r;n>o&&(n=o),console.log(n),console.log(o);for(let e=1;e<r+1;e++)l.push(String.fromCharCode(n++)+t)}return l}function n(e,t){this.name=e,this.coordinates=t}let l;const o=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,d=e.target.dataset.number,c=new n("Carrier",r(o,d,2,v));h===E[0]?(t=p,l="p1c"):h===E[1]&&(t=g,l="p2c"),t.push(c);let a=document.createElement("p");return a.textContent="Carrier-"+r(o,d,2,v),document.getElementById(l).appendChild(a),t},d=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,d=e.target.dataset.number,c=new n("Battleship",r(o,d,3,v));h===E[0]?(t=p,l="p1c"):h===E[1]&&(t=g,l="p2c"),t.push(c);let a=document.createElement("p");return a.textContent="BattleShip-"+r(o,d,3,v),document.getElementById(l).appendChild(a),t},c=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,d=e.target.dataset.number,c=new n("Cruiser",r(o,d,4,v));h===E[0]?(t=p,l="p1c"):h===E[1]&&(t=g,l="p2c"),t.push(c);let a=document.createElement("p");return a.textContent="Cruiser-"+r(o,d,4,v),document.getElementById(l).appendChild(a),t},a=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,d=e.target.dataset.number,c=new n("Submarine",r(o,d,5,v));h===E[0]?(t=p,l="p1c"):h===E[1]&&(t=g,l="p2c"),t.push(c);let a=document.createElement("p");return a.textContent="Submarine-"+r(o,d,5,v),document.getElementById(l).appendChild(a),t},i=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,d=e.target.dataset.number,c=new n("Destroyer",r(o,d,6,v));h===E[0]?(t=p,l="p1c"):h===E[1]&&(t=g,l="p2c"),t.push(c);let a=document.createElement("p");return a.textContent="Destroyer-"+r(o,d,6,v),document.getElementById(l).appendChild(a),t},s=function(e){e.target.style.backgroundColor="green";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v)for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="green";else if("H"===v){let e=r.charCodeAt(0);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="green"}},u=function(e){e.target.style.backgroundColor="white";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v)for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="white";else if("H"===v){let e=r.charCodeAt(0);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}};console.log("HI");let m,p=[],g=[],v="V",E=["player1","player2"],h=E[0];document.getElementById("pip").textContent=h,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===v?(v="H",document.getElementById("position").textContent="Horizontal"):"H"===v&&(v="V",document.getElementById("position").textContent="Vertical")}));const y=()=>{h===E[0]?(h=E[1],document.getElementById("pip").textContent=h):(E[1],h=E[0],document.getElementById("pip").textContent=h)};function C(e){console.log(e.target.dataset.letter)}function b(){m=1,y();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",b),e[t].style.backgroundColor="white";!function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",C),e[t].style.backgroundColor="white",e[t].addEventListener("mouseover",(e=>{e.target.style.backgroundColor="red"})),e[t].addEventListener("mouseleave",(e=>{e.target.style.backgroundColor="white"}))}()}const k={p1carrierShip:function(){t.createGameboard();let e=document.querySelectorAll(".cell");m=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",o),e[t].addEventListener("click",k.p1battleShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1battleShip:function(){let e=document.querySelectorAll(".cell");m=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",o),e[t].removeEventListener("click",k.p1battleShip),e[t].addEventListener("click",d),e[t].addEventListener("click",k.p1cruiserShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1cruiserShip:function(){let e=document.querySelectorAll(".cell");m=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",k.p1cruiserShip),e[t].addEventListener("click",c),e[t].addEventListener("click",k.p1submarineShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1submarineShip:function(){let e=document.querySelectorAll(".cell");m=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",k.p1submarineShip),e[t].addEventListener("click",a),e[t].addEventListener("click",k.p1destroyerShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1destroyerShip:function(){let e=document.querySelectorAll(".cell");m=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",k.p1destroyerShip),e[t].addEventListener("click",i),h===E[1]?e[t].addEventListener("click",b):h===E[0]&&e[t].addEventListener("click",k.loop),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},loop:function(){y();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",k.loop),e[t].style.backgroundColor="white";k.p1carrierShip()}};k.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,