(()=>{"use strict";var e={d:(t,l)=>{for(var n in l)e.o(l,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:l[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>k,zf:()=>b,o7:()=>w,bF:()=>x,P4:()=>A,VL:()=>S,hJ:()=>B,yR:()=>L,He:()=>I,w7:()=>Y,sq:()=>C,t:()=>q});const t={createGrids:(e,t,l)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===l||0===t?"none":"solid black 2px",n.textContent=l,n.style.textAlign="center",0===l&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.P1hit="N",n.dataset.P2hit="N",n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function l(e,t,l,n){let o=[];if("V"===n){let n=11-l;t>n&&(t=n);for(let n=1;n<l+1;n++)o.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),r=75-l;n>r&&(n=r),console.log(n),console.log(r);for(let e=1;e<l+1;e++)o.push(String.fromCharCode(n++)+t)}return o}function n(e,t){let l=e,n=t,o=0;for(let e=0;e<n.length;e++)for(let t=0;t<l.length;t++)for(let r=0;r<l[t].coordinates.length;r++)l[t].coordinates[r]===n[e]&&o++;return o=o>0?"Y":"N",o}function o(e,t){this.name=e,this.coordinates=t,this.hitShip=()=>{alert("You struck the "+e+" ship")},this.isSunk=()=>{0===t.length&&alert("You sunk the "+e+" ship")}}let r;const s=e=>{e.target.style.backgroundColor="red";let t,n=e.target.dataset.letter,s=e.target.dataset.number,a=new o("Carrier",l(n,s,2,w));return"0"===s?console.log("Stay in the grid."):(A===Y[0]?(t=S,r="p1c"):A===Y[1]&&(t=L,r="p2c"),t.push(a)),t},a=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Battleship",l(s,a,3,w));return"0"===a?console.log("Stay in the grid."):(A===Y[0]?(t=S,r="p1c"):A===Y[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,3,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},i=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Cruiser",l(s,a,4,w));return"0"===a?console.log("Stay in the grid."):(A===Y[0]?(t=S,r="p1c"):A===Y[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,4,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},c=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Submarine",l(s,a,5,w));return"0"===a?console.log("Stay in the grid."):(A===Y[0]?(t=S,r="p1c"):A===Y[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,5,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},d=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Destroyer",l(s,a,6,w));return"0"===a?console.log("Stay in the grid."):(A===Y[0]?(t=S,r="p1c"):A===Y[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,6,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},u=function(e){let t=e.target.dataset.number,l=e.target.dataset.letter,n="blue";if("V"===w){let e=11-C;t>e&&(t=e),n="0"===t?"white":"grey";for(let e=0;e<C;e++)document.getElementById(l+(+t+e)).style.backgroundColor=n}else if("H"===w){let e=l.charCodeAt(0),n=75-C;e>n&&(e=n);for(let l=0;l<C;l++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.backgroundColor="white";let t=e.target.dataset.number,l=e.target.dataset.letter,n=l+t;if(console.log(n),"V"===w){let e=11-C;t>e&&(t=e);for(let e=0;e<C;e++)document.getElementById(l+(+t+e)).style.backgroundColor="white"}else if("H"===w){let e=l.charCodeAt(0),n=75-C;e>n&&(e=n);for(let l=0;l<C;l++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}},m=function(){let e=B;A===Y[0]?e=B:A===Y[1]&&(e=I);for(let t=0;t<e.length;t++)console.log(e[t]),document.getElementById(e[t]).style.backgroundColor="red"},h=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},y=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},p=function(e){A===Y[0]?k=e.target.dataset.P1hit:A===Y[1]&&(k=e.target.dataset.P2hit),console.log(k),"Y"===k?e.target.style.backgroundColor="red":"N"===k&&(e.target.style.backgroundColor="white")},f=function(){let e=S;A===Y[0]?(e=S,console.log(e)):A===Y[1]&&(e=L,console.log(e));for(let t=0;t<e.length;t++)for(let l=0;l<e[t].coordinates.length;l++)document.getElementById(e[t].coordinates[l]).style.backgroundColor="grey"},v=(()=>{var e=document.getElementById("myModal"),t=document.getElementById("myBtn");let l=document.getElementById("para1"),n=document.getElementById("para2");document.getElementsByClassName("close")[0];let o=document.getElementById("PSbuttons");o.style.display="none";let r=document.getElementById("compHit");function s(){e.style.display="none"}r.style.display="none",t.onclick=function(){e.style.display="None"};let a=document.getElementById("frnd"),i=document.getElementById("comp");return{showModule:function(){e.style.display="block",l.textContent="CHANGE PLACES!",n.textContent="Click button when ready.",o.style.display="none",t.style.display="block"},playerSelect:function(){e.style.display="block",l.textContent="Are you playing with a friend or against our AI?",t.style.display="none",document.querySelector(".close").style.display="none",o.style.display="block",a.addEventListener("click",(()=>{b="N",e.style.display="none"})),i.addEventListener("click",(()=>{b="Y",e.style.display="none"}))},compHitModal:function(){e.style.display="block",l.textContent="Please click the button below to activate the AI choice!",t.style.display="none",r.style.display="block",document.querySelector(".close").style.display="none",o.style.display="none",r.addEventListener("click",x),r.addEventListener("click",s)},closeModal:s}})(),E=(()=>{function e(e,t){return Math.floor(Math.random()*(t-e+1)+e)}return{selectCarrier:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Carrier",l(r,s,2,a));"Y"===n(i,l(r,s,2,a))?E.selectCarrier():(i.push(c),E.selectBattleship())},selectBattleship:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Battleship",l(r,s,3,a));"Y"===n(i,l(r,s,3,a))?E.selectBattleship():(i.push(c),E.selectCruiser())},selectCruiser:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Cruiser",l(r,s,4,a));"Y"===n(i,l(r,s,4,a))?E.selectCruiser():(i.push(c),E.selectSubmarine())},selectSubmarine:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Submarine",l(r,s,5,a));"Y"===n(i,l(r,s,5,a))?E.selectSubmarine():(i.push(c),E.selectDestroyer())},selectDestroyer:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Destroyer",l(r,s,6,a));"Y"===n(i,l(r,s,6,a))?E.selectDestroyer():(i.push(c),q())},randomIntFromInterval:e}})();let C,k,b="N",S=[],L=[],B=[],I=[],w="V",Y=["player1","player2"],A=Y[0],P=S;A===Y[0]?P=S:A===Y[1]&&(P=L),document.getElementById("pip").textContent=A,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===w?(w="H",document.getElementById("position").textContent="Horizontal"):"H"===w&&(w="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("mouseover",(()=>{h(),f()})),document.getElementById("shwshipos").addEventListener("mouseleave",(()=>{h(),m()})),console.log("HEYEE");const M=()=>{let e;e="Y"===b?v.compHitModal():v.showModule(),A===Y[0]?(A=Y[1],P=L,document.getElementById("pip").textContent=A):A===Y[1]?(A=Y[0],P=S,document.getElementById("pip").textContent=A):(A=Y[0],P=L,document.getElementById("pip").textContent=A),h(),m()};let H;function V(){let e,t;e=String.fromCharCode(E.randomIntFromInterval(65,74)),t=Math.floor(1*Math.random()+1),H=e+t;for(let l=0;l<I.length;l++)I[l]===e+t?(alert("Been hit, computer, seek new tile! "),V()):H=e+t;return H}function x(e){console.log(e.target.dataset.letter),console.log(A);let t,l,n,o=S,r=B;if("Y"===b&&A===Y[1]?(alert("Computer is taking its hit"),console.log(V()),n=V(),alert("Computer has struck Tile: "+n)):(t=e.target.dataset.letter,l=e.target.dataset.number,n=t+l),console.log(n),console.log(o.length),A===Y[0]?(o=L,r=B,k=e.target.dataset.P1hit):A===Y[1]&&"Y"!=b?(o=S,r=I,k=e.target.dataset.P2hit):A===Y[1]&&"Y"===b&&(o=S,r=I),"0"===l)console.log("Stay in the grid.");else if("Y"===k)console.log("Already been hit, try again.");else{A===Y[0]?(o=L,r=B,k=e.target.dataset.P1hit="Y"):A===Y[1]&&(o=S,r=I,k=e.target.dataset.P2hit="Y");for(let e=0;e<o.length;e++)for(let t=0;t<o[e].coordinates.length;t++)o[e].coordinates[t]===n&&(console.log(o[e].coordinates),o[e].coordinates.splice(t,1),o[e].hitShip(),o[e].isSunk(),G(),console.log(o[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));r.push(n),console.log("P1 strikes: "+B),console.log("P2 strikes: "+I),M()}}function G(){let e,t=0,l=S;A===Y[0]?(l=L,e="Player One"):A===Y[1]&&(l=S,e="Player Two");for(let e=0;e<l.length;e++)0===l[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function q(){if(P.length>4)if("Y"===b){alert("Computer is choosing battle positions"),C=1;let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";N()}else{C=1,M();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",q),e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";N()}}function N(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",x),e[t].style.backgroundColor="white",e[t].removeEventListener("mouseover",u),e[t].removeEventListener("mouseleave",g),e[t].addEventListener("mouseover",y),e[t].addEventListener("mouseleave",p)}const D={p1carrierShip:function(){let e=document.querySelectorAll(".cell");C=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",s),e[t].addEventListener("click",D.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){if(P.length>0){let e=document.querySelectorAll(".cell");C=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",D.p1battleShip),e[t].addEventListener("click",a),e[t].addEventListener("click",D.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1cruiserShip:function(){if(P.length>1){console.log(P);let e=document.querySelectorAll(".cell");C=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",D.p1cruiserShip),e[t].addEventListener("click",i),e[t].addEventListener("click",D.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1submarineShip:function(){if(P.length>2){let e=document.querySelectorAll(".cell");C=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",D.p1submarineShip),e[t].addEventListener("click",c),e[t].addEventListener("click",D.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1destroyerShip:function(){if(P.length>3){let e=document.querySelectorAll(".cell");C=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",D.p1destroyerShip),e[t].addEventListener("click",d),A===Y[1]?e[t].addEventListener("click",q):A===Y[0]&&e[t].addEventListener("click",D.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},loop:function(){if(P.length>4)if("Y"===b){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",D.loop),e[t].style.backgroundColor="white";E.selectCarrier()}else{M();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",D.loop),e[t].style.backgroundColor="white";D.p1carrierShip()}}};v.playerSelect(),t.createGameboard(),D.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,