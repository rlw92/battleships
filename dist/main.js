(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o7:()=>v,P4:()=>E,VL:()=>p,yR:()=>g,w7:()=>h,sq:()=>m});const t={createGrids:(e,t,r)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===r||0===t?"none":"solid black 2px",n.textContent=r,n.style.textAlign="center",0===r&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.hit,n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function r(e,t,r,n){let l=[];if("V"===n){let n=11-r;t>n&&(t=n);for(let n=1;n<r+1;n++)l.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),o=75-r;n>o&&(n=o),console.log(n),console.log(o);for(let e=1;e<r+1;e++)l.push(String.fromCharCode(n++)+t)}return l}function n(e,t){this.name=e,this.coordinates=t}let l;const o=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,a=e.target.dataset.number,d=new n("Carrier",r(o,a,2,v));E===h[0]?(t=p,l="p1c"):E===h[1]&&(t=g,l="p2c"),t.push(d);let c=document.createElement("p");return c.textContent="Carrier-"+r(o,a,2,v),document.getElementById(l).appendChild(c),t},a=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,a=e.target.dataset.number,d=new n("Battleship",r(o,a,3,v));E===h[0]?(t=p,l="p1c"):E===h[1]&&(t=g,l="p2c"),t.push(d);let c=document.createElement("p");return c.textContent="BattleShip-"+r(o,a,3,v),document.getElementById(l).appendChild(c),t},d=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,a=e.target.dataset.number,d=new n("Cruiser",r(o,a,4,v));E===h[0]?(t=p,l="p1c"):E===h[1]&&(t=g,l="p2c"),t.push(d);let c=document.createElement("p");return c.textContent="Cruiser-"+r(o,a,4,v),document.getElementById(l).appendChild(c),t},c=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,a=e.target.dataset.number,d=new n("Submarine",r(o,a,5,v));E===h[0]?(t=p,l="p1c"):E===h[1]&&(t=g,l="p2c"),t.push(d);let c=document.createElement("p");return c.textContent="Submarine-"+r(o,a,5,v),document.getElementById(l).appendChild(c),t},i=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,a=e.target.dataset.number,d=new n("Destroyer",r(o,a,6,v));E===h[0]?(t=p,l="p1c"):E===h[1]&&(t=g,l="p2c"),t.push(d);let c=document.createElement("p");return c.textContent="Destroyer-"+r(o,a,6,v),document.getElementById(l).appendChild(c),t},s=function(e){e.target.style.backgroundColor="green";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v)for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="green";else if("H"===v){let e=r.charCodeAt(0);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="green"}},u=function(e){e.target.style.backgroundColor="white";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v)for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="white";else if("H"===v){let e=r.charCodeAt(0);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}};let m,p=[],g=[],v="V",h=["player1","player2"],E=h[0];document.getElementById("pip").textContent=E,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===v?(v="H",document.getElementById("position").textContent="Horizontal"):"H"===v&&(v="V",document.getElementById("position").textContent="Vertical")}));const y=()=>{E===h[0]?(E=h[1],document.getElementById("pip").textContent=E):(h[1],E=h[0],document.getElementById("pip").textContent=E)};function C(e){let t=p,r=e.target.dataset.letter+e.target.dataset.number;console.log(r),E===h[0]?t=g:E===h[1]&&(t=p);for(let e=0;e<t[0].length;e++)t[0][e]===r&&(alert("HIT"),t[0].splice(e,1),console.log(t[0]),console.log(p[0]),0===p[0].length?alert("Player two wins"):0===g[0].length&&alert("Player one wins"));return y(),t}function b(){m=1,y();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",b),e[t].style.backgroundColor="white";!function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",C),e[t].style.backgroundColor="white",e[t].addEventListener("mouseover",(e=>{e.target.style.backgroundColor="red"})),e[t].addEventListener("mouseleave",(e=>{e.target.style.backgroundColor="white"}))}()}const k={p1carrierShip:function(){t.createGameboard();let e=document.querySelectorAll(".cell");m=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",o),e[t].addEventListener("click",k.p1battleShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1battleShip:function(){let e=document.querySelectorAll(".cell");m=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",o),e[t].removeEventListener("click",k.p1battleShip),e[t].addEventListener("click",a),e[t].addEventListener("click",k.p1cruiserShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1cruiserShip:function(){let e=document.querySelectorAll(".cell");m=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",k.p1cruiserShip),e[t].addEventListener("click",d),e[t].addEventListener("click",k.p1submarineShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1submarineShip:function(){let e=document.querySelectorAll(".cell");m=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",k.p1submarineShip),e[t].addEventListener("click",c),e[t].addEventListener("click",k.p1destroyerShip),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},p1destroyerShip:function(){let e=document.querySelectorAll(".cell");m=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",k.p1destroyerShip),e[t].addEventListener("click",i),E===h[1]?e[t].addEventListener("click",b):E===h[0]&&e[t].addEventListener("click",k.loop),e[t].addEventListener("mouseover",s),e[t].addEventListener("mouseleave",u)},loop:function(){y();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",k.loop),e[t].style.backgroundColor="white";k.p1carrierShip()}};k.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,