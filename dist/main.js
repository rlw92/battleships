(()=>{"use strict";var e={d:(t,o)=>{for(var r in o)e.o(o,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:o[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>c,o7:()=>y,P4:()=>f,VL:()=>i,hJ:()=>u,yR:()=>g,He:()=>m,w7:()=>h,sq:()=>s});const t={createGrids:(e,t,o)=>{let r=document.createElement("div");r.style.padding="10px",r.style.border=0===o||0===t?"none":"solid black 2px",r.textContent=o,r.style.textAlign="center",0===o&&"0"===e?r.textContent=t:0===t&&"0"!=e&&(r.textContent=e),r.dataset.hit="No",r.dataset.P1hit="N",r.dataset.P2hit="N",r.dataset.letter=e,r.dataset.number=t,r.classList.add("cell"),r.setAttribute("id",r.dataset.letter+r.dataset.number),document.getElementById("gameboard1").appendChild(r)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}},o=function(e){let t=e.target.dataset.number,o=e.target.dataset.letter,r="blue";if("V"===y){let e=NaN;t>e&&(t=e),r="0"===t?"white":"grey";for(let e=0;e<s;e++)document.getElementById(o+(+t+e)).style.backgroundColor=r}else if("H"===y){let e=o.charCodeAt(0),r=NaN;e>r&&(e=r);for(let o=0;o<s;o++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},r=function(e){e.target.backgroundColor="white";let t=e.target.dataset.number,o=e.target.dataset.letter,r=o+t;if(console.log(r),"V"===y){let e=NaN;t>e&&(t=e);for(let e=0;e<s;e++)document.getElementById(o+(+t+e)).style.backgroundColor="white"}else if("H"===y){let e=o.charCodeAt(0),r=NaN;e>r&&(e=r);for(let o=0;o<s;o++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}},n=function(){let e=u;f===h[0]?e=u:f===h[1]&&(e=m);for(let t=0;t<e.length;t++)console.log(e[t]),document.getElementById(e[t]).style.backgroundColor="red"},l=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},a=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},d=function(e){f===h[0]?c=e.target.dataset.P1hit:f===h[1]&&(c=e.target.dataset.P2hit),console.log(c),"Y"===c?e.target.style.backgroundColor="red":"N"===c&&(e.target.style.backgroundColor="white")};let s,c,i=[],g=[],u=[],m=[],y="V",h=["player1","player2"],f=h[0],C=i;f===h[0]?C=i:f===h[1]&&(C=g),document.getElementById("pip").textContent=f,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===y?(y="H",document.getElementById("position").textContent="Horizontal"):"H"===y&&(y="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("click",n);function b(e){console.log(e.target.dataset.letter);let t=i,o=u,r=e.target.dataset.letter,a=e.target.dataset.number,d=r+a;if(console.log(d),console.log(t.length),f===h[0]?(t=g,o=u,c=e.target.dataset.P1hit):f===h[1]&&(t=i,o=m,c=e.target.dataset.P2hit),"0"===a)console.log("Stay in the grid.");else if("Y"===c)console.log("Already been hit, try again.");else{f===h[0]?(t=g,o=u,c=e.target.dataset.P1hit="Y"):f===h[1]&&(t=i,o=m,c=e.target.dataset.P2hit="Y");for(let e=0;e<t.length;e++)for(let o=0;o<t[e].coordinates.length;o++)t[e].coordinates[o]===d&&(console.log(t[e].coordinates),t[e].coordinates.splice(o,1),t[e].hitShip(),t[e].isSunk(),p(),console.log(t[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));o.push(d),console.log("P1 strikes: "+u),console.log("P2 strikes: "+m),f===h[0]?(f=h[1],C=g,document.getElementById("pip").textContent=f):f===h[1]?(f=h[0],C=i,document.getElementById("pip").textContent=f):(f=h[0],C=g,document.getElementById("pip").textContent=f),l(),n()}}function p(){let e,t=0,o=i;f===h[0]?(o=g,e="Player One"):f===h[1]&&(o=i,e="Player Two");for(let e=0;e<o.length;e++)0===o[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}t.createGameboard(),function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",b),e[t].style.backgroundColor="white",e[t].removeEventListener("mouseover",o),e[t].removeEventListener("mouseleave",r),e[t].addEventListener("mouseover",a),e[t].addEventListener("mouseleave",d)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,