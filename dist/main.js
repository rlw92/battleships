(()=>{"use strict";var e={d:(t,o)=>{for(var n in o)e.o(o,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:o[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>d,o7:()=>u,P4:()=>y,VL:()=>s,hJ:()=>i,yR:()=>c,He:()=>g,w7:()=>m,sq:()=>a});const t={createGrids:(e,t,o)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===o||0===t?"none":"solid black 2px",n.textContent=o,n.style.textAlign="center",0===o&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.P1hit="N",n.dataset.P2hit="N",n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}},o=function(){let e=i;y===m[0]?e=i:y===m[1]&&(e=g);for(let t=0;t<e.length;t++)console.log(e[t]),document.getElementById(e[t]).style.backgroundColor="red"},n=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},r=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},l=function(e){y===m[0]?d=e.target.dataset.P1hit:y===m[1]&&(d=e.target.dataset.P2hit),console.log(d),"Y"===d?e.target.style.backgroundColor="red":"N"===d&&(e.target.style.backgroundColor="white")};let a,d,s=[],c=[],i=[],g=[],u="V",m=["player1","player2"],y=m[0],h=s;y===m[0]?h=s:y===m[1]&&(h=c),document.getElementById("pip").textContent=y,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===u?(u="H",document.getElementById("position").textContent="Horizontal"):"H"===u&&(u="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("click",o);function p(e){console.log(e.target.dataset.letter);let t=s,r=i,l=e.target.dataset.letter,a=e.target.dataset.number,u=l+a;if(console.log(u),console.log(t.length),"0"===a)console.log("Stay in the grid.");else{y===m[0]?(t=c,r=i,d=e.target.dataset.P1hit="Y"):y===m[1]&&(t=s,r=g,d=e.target.dataset.P2hit="Y");for(let e=0;e<t.length;e++)for(let o=0;o<t[e].coordinates.length;o++)t[e].coordinates[o]===u&&(console.log(t[e].coordinates),t[e].coordinates.splice(o,1),t[e].hitShip(),t[e].isSunk(),b(),console.log(t[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));r.push(u),console.log("P1 strikes: "+i),console.log("P2 strikes: "+g),y===m[0]?(y=m[1],h=c,document.getElementById("pip").textContent=y):y===m[1]?(y=m[0],h=s,document.getElementById("pip").textContent=y):(y=m[0],h=c,document.getElementById("pip").textContent=y),n(),o()}}function b(){let e,t=0,o=s;y===m[0]?(o=c,e="Player One"):y===m[1]&&(o=s,e="Player Two");for(let e=0;e<o.length;e++)0===o[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}t.createGameboard(),function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",p),e[t].style.backgroundColor="white",e[t].addEventListener("mouseover",r),e[t].addEventListener("mouseleave",l)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,