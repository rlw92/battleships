(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>L,o7:()=>P,P4:()=>G,VL:()=>S,hJ:()=>B,yR:()=>w,He:()=>I,w7:()=>A,sq:()=>C});const t={createGrids:(e,t,n)=>{let o=document.createElement("div");o.style.padding="10px",o.style.border=0===n||0===t?"none":"solid black 2px",o.textContent=n,o.style.textAlign="center",0===n&&"0"===e?o.textContent=t:0===t&&"0"!=e&&(o.textContent=e),o.dataset.hit="No",o.dataset.P1hit="N",o.dataset.P2hit="N",o.dataset.letter=e,o.dataset.number=t,o.classList.add("cell"),o.setAttribute("id",o.dataset.letter+o.dataset.number),document.getElementById("gameboard1").appendChild(o)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function n(e,t,n,o){let l=[];if("V"===o){let o=11-n;t>o&&(t=o);for(let o=1;o<n+1;o++)l.push(e+t++)}else if("H"===o){let o=e.charCodeAt(0),r=75-n;o>r&&(o=r),console.log(o),console.log(r);for(let e=1;e<n+1;e++)l.push(String.fromCharCode(o++)+t)}return l}function o(e,t){let n=e,o=t,l=0;for(let e=0;e<o.length;e++)for(let t=0;t<n.length;t++)for(let r=0;r<n[t].coordinates.length;r++)n[t].coordinates[r]===o[e]&&l++;return l=l>0?"Y":"N",l}function l(e,t){this.name=e,this.coordinates=t,this.hitShip=()=>{alert("You struck the "+e+" ship")},this.isSunk=()=>{0===t.length&&alert("You sunk the "+e+" ship")}}let r;const s=e=>{e.target.style.backgroundColor="red";let t,o=e.target.dataset.letter,s=e.target.dataset.number,a=new l("Carrier",n(o,s,2,P));return"0"===s?console.log("Stay in the grid."):(G===A[0]?(t=S,r="p1c"):G===A[1]&&(t=w,r="p2c"),t.push(a)),t},a=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Battleship",n(s,a,3,P));return"0"===a?console.log("Stay in the grid."):(G===A[0]?(t=S,r="p1c"):G===A[1]&&(t=w,r="p2c"),"Y"===o(t,n(s,a,3,P))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},i=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Cruiser",n(s,a,4,P));return"0"===a?console.log("Stay in the grid."):(G===A[0]?(t=S,r="p1c"):G===A[1]&&(t=w,r="p2c"),"Y"===o(t,n(s,a,4,P))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},d=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Submarine",n(s,a,5,P));return"0"===a?console.log("Stay in the grid."):(G===A[0]?(t=S,r="p1c"):G===A[1]&&(t=w,r="p2c"),"Y"===o(t,n(s,a,5,P))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},c=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Destroyer",n(s,a,6,P));return"0"===a?console.log("Stay in the grid."):(G===A[0]?(t=S,r="p1c"):G===A[1]&&(t=w,r="p2c"),"Y"===o(t,n(s,a,6,P))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},g=function(e){let t=e.target.dataset.number,n=e.target.dataset.letter,o="blue";if("V"===P){let e=11-C;t>e&&(t=e),o="0"===t?"white":"grey";for(let e=0;e<C;e++)document.getElementById(n+(+t+e)).style.backgroundColor=o}else if("H"===P){let e=n.charCodeAt(0),o=75-C;e>o&&(e=o);for(let n=0;n<C;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},u=function(e){e.target.backgroundColor="white";let t=e.target.dataset.number,n=e.target.dataset.letter,o=n+t;if(console.log(o),"V"===P){let e=11-C;t>e&&(t=e);for(let e=0;e<C;e++)document.getElementById(n+(+t+e)).style.backgroundColor="white"}else if("H"===P){let e=n.charCodeAt(0),o=75-C;e>o&&(e=o);for(let n=0;n<C;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}},h=function(){let e=B;G===A[0]?e=B:G===A[1]&&(e=I);for(let t=0;t<e.length;t++)console.log(e[t]),document.getElementById(e[t]).style.backgroundColor="red"},m=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},y=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},p=function(e){G===A[0]?L=e.target.dataset.P1hit:G===A[1]&&(L=e.target.dataset.P2hit),console.log(L),"Y"===L?e.target.style.backgroundColor="red":"N"===L&&(e.target.style.backgroundColor="white")},v=function(){let e=S;G===A[0]?(e=S,console.log(e)):G===A[1]&&(e=w,console.log(e));for(let t=0;t<e.length;t++)for(let n=0;n<e[t].coordinates.length;n++)document.getElementById(e[t].coordinates[n]).style.backgroundColor="grey"},f=(E=document.getElementById("myModal"),k=document.getElementById("myBtn"),b=document.getElementsByClassName("close")[0],k.onclick=function(){E.style.display="None"},b.onclick=function(){E.style.display="none"},window.onclick=function(e){e.target==E&&(E.style.display="none")},{showModule:function(){E.style.display="block"}});var E,k,b;let C,L,S=[],w=[],B=[],I=[],P="V",A=["player1","player2"],G=A[0],x=S;G===A[0]?x=S:G===A[1]&&(x=w),document.getElementById("pip").textContent=G,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===P?(P="H",document.getElementById("position").textContent="Horizontal"):"H"===P&&(P="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("mouseover",(()=>{m(),v()})),document.getElementById("shwshipos").addEventListener("mouseleave",(()=>{m(),h()}));const Y=()=>{f.showModule(),G===A[0]?(G=A[1],x=w,document.getElementById("pip").textContent=G):G===A[1]?(G=A[0],x=S,document.getElementById("pip").textContent=G):(G=A[0],x=w,document.getElementById("pip").textContent=G),m(),h()};function q(e){console.log(e.target.dataset.letter);let t=S,n=B,o=e.target.dataset.letter,l=e.target.dataset.number,r=o+l;if(console.log(r),console.log(t.length),G===A[0]?(t=w,n=B,L=e.target.dataset.P1hit):G===A[1]&&(t=S,n=I,L=e.target.dataset.P2hit),"0"===l)console.log("Stay in the grid.");else if("Y"===L)console.log("Already been hit, try again.");else{G===A[0]?(t=w,n=B,L=e.target.dataset.P1hit="Y"):G===A[1]&&(t=S,n=I,L=e.target.dataset.P2hit="Y");for(let e=0;e<t.length;e++)for(let n=0;n<t[e].coordinates.length;n++)t[e].coordinates[n]===r&&(console.log(t[e].coordinates),t[e].coordinates.splice(n,1),t[e].hitShip(),t[e].isSunk(),H(),console.log(t[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));n.push(r),console.log("P1 strikes: "+B),console.log("P2 strikes: "+I),Y()}}function H(){let e,t=0,n=S;G===A[0]?(n=w,e="Player One"):G===A[1]&&(n=S,e="Player Two");for(let e=0;e<n.length;e++)0===n[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function V(){if(x.length>4){C=1,Y();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",V),e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";!function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",q),e[t].style.backgroundColor="white",e[t].removeEventListener("mouseover",g),e[t].removeEventListener("mouseleave",u),e[t].addEventListener("mouseover",y),e[t].addEventListener("mouseleave",p)}()}}const N={p1carrierShip:function(){let e=document.querySelectorAll(".cell");C=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",s),e[t].addEventListener("click",N.p1battleShip),e[t].addEventListener("mouseover",g),e[t].addEventListener("mouseleave",u)},p1battleShip:function(){if(x.length>0){let e=document.querySelectorAll(".cell");C=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",N.p1battleShip),e[t].addEventListener("click",a),e[t].addEventListener("click",N.p1cruiserShip),e[t].addEventListener("mouseover",g),e[t].addEventListener("mouseleave",u)}},p1cruiserShip:function(){if(x.length>1){console.log(x);let e=document.querySelectorAll(".cell");C=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",N.p1cruiserShip),e[t].addEventListener("click",i),e[t].addEventListener("click",N.p1submarineShip),e[t].addEventListener("mouseover",g),e[t].addEventListener("mouseleave",u)}},p1submarineShip:function(){if(x.length>2){let e=document.querySelectorAll(".cell");C=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",N.p1submarineShip),e[t].addEventListener("click",d),e[t].addEventListener("click",N.p1destroyerShip),e[t].addEventListener("mouseover",g),e[t].addEventListener("mouseleave",u)}},p1destroyerShip:function(){if(x.length>3){let e=document.querySelectorAll(".cell");C=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",N.p1destroyerShip),e[t].addEventListener("click",c),G===A[1]?e[t].addEventListener("click",V):G===A[0]&&e[t].addEventListener("click",N.loop),e[t].addEventListener("mouseover",g),e[t].addEventListener("mouseleave",u)}},loop:function(){if(x.length>4){Y();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",N.loop),e[t].style.backgroundColor="white";N.p1carrierShip()}}};t.createGameboard(),N.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,