(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o7:()=>f,P4:()=>v,VL:()=>m,yR:()=>p,w7:()=>y,sq:()=>h});const t={createGrids:(e,t,r)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===r||0===t?"none":"solid black 2px",n.textContent=r,n.style.textAlign="center",0===r&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.hit,n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function r(e,t,r,n){let l=[];if("V"===n){let n=11-r;t>n&&(t=n);for(let n=1;n<r+1;n++)l.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),o=75-r;n>o&&(n=o),console.log(n),console.log(o);for(let e=1;e<r+1;e++)l.push(String.fromCharCode(n++)+t)}return l}function n(e,t){let r=e,n=t,l=0;for(let e=0;e<n.length;e++)for(let t=0;t<r.length;t++)for(let o=0;o<r[t].coordinates.length;o++)r[t].coordinates[o]===n[e]&&l++;return l=l>0?"Y":"N",l}function l(e,t){this.name=e,this.coordinates=t,this.hitShip=()=>{alert("You struck the "+e+" ship")},this.isSunk=()=>{0===t.length&&alert("You sunk the "+e+" ship")}}let o;const a=e=>{e.target.style.backgroundColor="red";let t,n=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Carrier",r(n,a,2,f));if("0"===a)console.log("Stay in the grid.");else{v===y[0]?(t=m,o="p1c"):v===y[1]&&(t=p,o="p2c"),t.push(i);let e=document.createElement("p");e.textContent="Carrier-"+r(n,a,2,f),document.getElementById(o).appendChild(e)}return t},i=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Battleship",r(a,i,3,f));if("0"===i)console.log("Stay in the grid.");else if(v===y[0]?(t=m,o="p1c"):v===y[1]&&(t=p,o="p2c"),"Y"===n(t,r(a,i,3,f)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="BattleShip-"+r(a,i,3,f),document.getElementById(o).appendChild(e)}return t},s=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Cruiser",r(a,i,4,f));if("0"===i)console.log("Stay in the grid.");else if(v===y[0]?(t=m,o="p1c"):v===y[1]&&(t=p,o="p2c"),"Y"===n(t,r(a,i,4,f)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Cruiser-"+r(a,i,4,f),document.getElementById(o).appendChild(e)}return t},d=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Submarine",r(a,i,5,f));if("0"===i)console.log("Stay in the grid.");else if(v===y[0]?(t=m,o="p1c"):v===y[1]&&(t=p,o="p2c"),"Y"===n(t,r(a,i,5,f)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Submarine-"+r(a,i,5,f),document.getElementById(o).appendChild(e)}return t},c=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Destroyer",r(a,i,6,f));if("0"===i)console.log("Stay in the grid.");else if(v===y[0]?(t=m,o="p1c"):v===y[1]&&(t=p,o="p2c"),"Y"===n(t,r(a,i,6,f)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Destroyer-"+r(a,i,6,f),document.getElementById(o).appendChild(e)}return t},u=function(e){let t=e.target.dataset.number,r=e.target.dataset.letter,n="blue";if("V"===f){let e=11-h;t>e&&(t=e),n="0"===t?"white":"grey";for(let e=0;e<h;e++)document.getElementById(r+(+t+e)).style.backgroundColor=n}else if("H"===f){let e=r.charCodeAt(0),n=75-h;e>n&&(e=n);for(let r=0;r<h;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.style.backgroundColor="white";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===f){let e=11-h;t>e&&(t=e);for(let e=0;e<h;e++)document.getElementById(r+(+t+e)).style.backgroundColor="white"}else if("H"===f){let e=r.charCodeAt(0),n=75-h;e>n&&(e=n);for(let r=0;r<h;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}};console.log("FUYOU");let h,m=[],p=[],f="V",y=["player1","player2"],v=y[0],E=m;v===y[0]?E=m:v===y[1]&&(E=p),document.getElementById("pip").textContent=v,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===f?(f="H",document.getElementById("position").textContent="Horizontal"):"H"===f&&(f="V",document.getElementById("position").textContent="Vertical")}));const C=()=>{v===y[0]?(v=y[1],E=p,document.getElementById("pip").textContent=v):v===y[1]?(v=y[0],E=m,document.getElementById("pip").textContent=v):(v=y[0],E=p,document.getElementById("pip").textContent=v)};function b(e){console.log(e.target.dataset.letter);let t=m,r=e.target.dataset.letter,n=e.target.dataset.number,l=r+n;if(console.log(l),console.log(t.length),"0"===n)console.log("Stay in the grid.");else{v===y[0]?t=p:v===y[1]&&(t=m);for(let e=0;e<t.length;e++)for(let r=0;r<t[e].coordinates.length;r++)t[e].coordinates[r]===l&&(console.log(t[e].coordinates),t[e].coordinates.splice(r,1),t[e].hitShip(),t[e].isSunk(),k(),console.log(t[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));C()}}function k(){let e,t=0,r=m;v===y[0]?(r=p,e="Player One"):v===y[1]&&(r=m,e="Player Two");for(let e=0;e<r.length;e++)0===r[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function L(){if(E.length>4){h=1,C();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",L),e[t].style.backgroundColor="white";!function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",b),e[t].style.backgroundColor="white",e[t].addEventListener("mouseover",(e=>{"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"})),e[t].addEventListener("mouseleave",(e=>{e.target.style.backgroundColor="white"}))}()}}const S={p1carrierShip:function(){let e=document.querySelectorAll(".cell");h=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",a),e[t].addEventListener("click",S.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){if(E.length>0){let e=document.querySelectorAll(".cell");h=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",S.p1battleShip),e[t].addEventListener("click",i),e[t].addEventListener("click",S.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1cruiserShip:function(){if(E.length>1){console.log(E);let e=document.querySelectorAll(".cell");h=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",S.p1cruiserShip),e[t].addEventListener("click",s),e[t].addEventListener("click",S.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1submarineShip:function(){if(E.length>2){let e=document.querySelectorAll(".cell");h=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",S.p1submarineShip),e[t].addEventListener("click",d),e[t].addEventListener("click",S.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1destroyerShip:function(){if(E.length>3){let e=document.querySelectorAll(".cell");h=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",S.p1destroyerShip),e[t].addEventListener("click",c),v===y[1]?e[t].addEventListener("click",L):v===y[0]&&e[t].addEventListener("click",S.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},loop:function(){if(E.length>4){C();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",S.loop),e[t].style.backgroundColor="white";S.p1carrierShip()}}};t.createGameboard(),S.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,