(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o7:()=>v,P4:()=>f,VL:()=>p,yR:()=>h,w7:()=>y,sq:()=>m});const t={createGrids:(e,t,r)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===r||0===t?"none":"solid black 2px",n.textContent=r,n.style.textAlign="center",0===r&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.hit,n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function r(e,t,r,n){let l=[];if("V"===n){let n=11-r;t>n&&(t=n);for(let n=1;n<r+1;n++)l.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),o=75-r;n>o&&(n=o),console.log(n),console.log(o);for(let e=1;e<r+1;e++)l.push(String.fromCharCode(n++)+t)}return l}function n(e,t){let r=e,n=t,l=0;for(let e=0;e<n.length;e++)for(let t=0;t<r.length;t++)for(let o=0;o<r[t].coordinates.length;o++)r[t].coordinates[o]===n[e]&&l++;return l=l>0?"Y":"N",l}function l(e,t){this.name=e,this.coordinates=t,this.hitShip=()=>{alert("You struck the "+e+" ship")},this.isSunk=()=>{0===t.length&&alert("You sunk the "+e+" ship")}}let o;const a=e=>{e.target.style.backgroundColor="red";let t,n=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Carrier",r(n,a,2,v));f===y[0]?(t=p,o="p1c"):f===y[1]&&(t=h,o="p2c"),t.push(i);let s=document.createElement("p");return s.textContent="Carrier-"+r(n,a,2,v),document.getElementById(o).appendChild(s),t},i=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Battleship",r(a,i,3,v));if(f===y[0]?(t=p,o="p1c"):f===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,i,3,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="BattleShip-"+r(a,i,3,v),document.getElementById(o).appendChild(e)}return t},s=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Cruiser",r(a,i,4,v));if(f===y[0]?(t=p,o="p1c"):f===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,i,4,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Cruiser-"+r(a,i,4,v),document.getElementById(o).appendChild(e)}return t},d=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Submarine",r(a,i,5,v));if(f===y[0]?(t=p,o="p1c"):f===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,i,5,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Submarine-"+r(a,i,5,v),document.getElementById(o).appendChild(e)}return t},c=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Destroyer",r(a,i,6,v));if(f===y[0]?(t=p,o="p1c"):f===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,i,6,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Destroyer-"+r(a,i,6,v),document.getElementById(o).appendChild(e)}return t},u=function(e){e.target.style.backgroundColor="green";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v){let e=11-m;t>e&&(t=e);for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="grey"}else if("H"===v){let e=r.charCodeAt(0),n=75-m;e>n&&(e=n);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.style.backgroundColor="white";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v){let e=11-m;t>e&&(t=e);for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="white"}else if("H"===v){let e=r.charCodeAt(0),n=75-m;e>n&&(e=n);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}};let m,p=[],h=[],v="V",y=["player1","player2"],f=y[0],E=p;f===y[0]?E=p:f===y[1]&&(E=h),document.getElementById("pip").textContent=f,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===v?(v="H",document.getElementById("position").textContent="Horizontal"):"H"===v&&(v="V",document.getElementById("position").textContent="Vertical")}));const C=()=>{f===y[0]?(f=y[1],document.getElementById("pip").textContent=f):(y[1],f=y[0],document.getElementById("pip").textContent=f)};function k(e){console.log(e.target.dataset.letter);let t=p,r=e.target.dataset.letter+e.target.dataset.number;console.log(r),console.log(t.length),f===y[0]?t=h:f===y[1]&&(t=p);for(let e=0;e<t.length;e++)for(let n=0;n<t[e].coordinates.length;n++)t[e].coordinates[n]===r&&(console.log(t[e].coordinates),t[e].coordinates.splice(n,1),t[e].hitShip(),t[e].isSunk(),b(),console.log(t[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));C()}function b(){let e,t=0,r=p;f===y[0]?(r=h,e="Player One"):f===y[1]&&(r=p,e="Player Two");for(let e=0;e<r.length;e++)0===r[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function L(){m=1,C();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",L),e[t].style.backgroundColor="white";!function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",k),e[t].style.backgroundColor="white",e[t].addEventListener("mouseover",(e=>{e.target.style.backgroundColor="red"})),e[t].addEventListener("mouseleave",(e=>{e.target.style.backgroundColor="white"}))}()}const S={p1carrierShip:function(){let e=document.querySelectorAll(".cell");m=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",a),e[t].addEventListener("click",S.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){let e=document.querySelectorAll(".cell");m=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",S.p1battleShip),e[t].addEventListener("click",i),e[t].addEventListener("click",S.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1cruiserShip:function(){if(E.length>1){console.log(E);let e=document.querySelectorAll(".cell");m=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",S.p1cruiserShip),e[t].addEventListener("click",s),e[t].addEventListener("click",S.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1submarineShip:function(){if(E.length>2){let e=document.querySelectorAll(".cell");m=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",S.p1submarineShip),e[t].addEventListener("click",d),e[t].addEventListener("click",S.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1destroyerShip:function(){if(E.length>3){let e=document.querySelectorAll(".cell");m=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",S.p1destroyerShip),e[t].addEventListener("click",c),f===y[1]?e[t].addEventListener("click",L):f===y[0]&&e[t].addEventListener("click",S.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},loop:function(){if(E.length>4){C();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",S.loop),e[t].style.backgroundColor="white";S.p1carrierShip()}}};t.createGameboard(),S.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFLENBSXJCZ0QsSUFDSSxJQUFJTyxFQUFRNUUsU0FBUzZFLGlCQUFpQixTQUV0QyxJQUFJLElBQUk1RCxFQUFFLEVBQUVBLEVBQUUyRCxFQUFNdkQsT0FBT0osSUFDdkIyRCxFQUFNM0QsR0FBRzZELG9CQUFvQixRQUFRaEIsR0FDckNjLEVBQU0zRCxHQUFHNkQsb0JBQW9CLFFBQVFFLEVBQWdCTSxNQUNyRFYsRUFBTTNELEdBQUdmLE1BQU1pRCxnQkFBa0IsUUFFN0M2QixFQUFnQkMsbUJBY1p2RixFQUFnQnNCLGtCQUNwQmdFLEVBQWdCQyxpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXBzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXBzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9jaG9vc2VDb29yZGluYXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9vdmVyTGFwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL3NoaXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXBzLy4vc3JjL2RvbS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwcy8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImNvbnN0IEdhbWVib2FyZE1vZHVsZSA9ICgoKSA9PiB7XG5cbiAgICBsZXQgYm9yZCA9IFwic29saWQgYmxhY2sgMnB4XCI7XG4gICAgbGV0IG5vYm9yZCA9IFwibm9uZVwiO1xuICAgIFxuICAgIFxuICAgIGNvbnN0IGNyZWF0ZUdyaWRzID0gKGx0cixubyxpZCkgPT57XG4gICAgbGV0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgZ3JpZC5zdHlsZS5wYWRkaW5nID0gXCIxMHB4XCI7XG4gICAgLy90cnlpbmcgdG8gdGFrZSBvdXQgdGhlIGJvcmRlcmluZyBvZiB0aGUgbm90IGluIHBsYXkgY2VsbHNcbiAgICBpZihpZD09PSAwKXtncmlkLnN0eWxlLmJvcmRlcj1ub2JvcmR9XG4gICAgZWxzZSBpZihubz09PTApe2dyaWQuc3R5bGUuYm9yZGVyID0gbm9ib3JkO31cbiAgICBlbHNle2dyaWQuc3R5bGUuYm9yZGVyID0gYm9yZDt9XG4gICAgXG4gICAgXG4gICAgZ3JpZC50ZXh0Q29udGVudCA9IGlkO1xuICAgIGdyaWQuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICBpZihpZD09PTAgJiYgbHRyPT09XCIwXCIpe2dyaWQudGV4dENvbnRlbnQgPSBub31cbiAgICBlbHNlIGlmKG5vPT09MCAmJiBsdHIhPVwiMFwiKXtncmlkLnRleHRDb250ZW50ID0gbHRyfVxuICAgIGdyaWQuZGF0YXNldC5oaXQgPSBcIk5vXCJcbiAgICBsZXQgZ3JkYXRhID0gZ3JpZC5kYXRhc2V0LmhpdDtcbiAgICBsZXQgbGV0dGVyID0gZ3JpZC5kYXRhc2V0LmxldHRlciA9IGx0cjtcbiAgICBsZXQgbnVtYmVyID0gZ3JpZC5kYXRhc2V0Lm51bWJlciA9IG5vO1xuICAgIC8vc2hvd3Mgd2hpY2ggcGxheWVyIG93bnMgdGhlIGNlbGwvL1xuICAgIC8vbGV0IHBsYXllciA9IGdyaWQuZGF0YXNldC5wbGF5ZXJjZWxsID0gXCJwbGF5ZXJcIitwbHlyO1xuICAgIFxuICAgIC8vY3JlYXRpbmcgYSBjbGFzcyBmb3IgZWFjaCBncmlkIHNvIHdlIGNhbiBhY2Nlc3MgaXQgZnJvbSB0aGUgZnVuY3Rpb25zXG4gICAgZ3JpZC5jbGFzc0xpc3QuYWRkKFwiY2VsbFwiKTtcbiAgICAvL2NyZWF0aW5nIGFuIGlkIHRoYXQgbWF0Y2hlcyBpdHMgY29vcmRpbmF0ZXNcbiAgICBncmlkLnNldEF0dHJpYnV0ZSgnaWQnLGdyaWQuZGF0YXNldC5sZXR0ZXIrZ3JpZC5kYXRhc2V0Lm51bWJlcilcbiAgICBcbiAgICAgICAgIFxuICAgIGxldCBnYW1lYm9hcmQgPSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnYW1lYm9hcmQxXCIpO1xuICAgIFxuICAgIGdhbWVib2FyZC5hcHBlbmRDaGlsZChncmlkKTtcbiAgICBcbiAgICB9XG4gICAgXG4gICAgLy9jcmVhdGUgdGhlIHdob2xlIGdyaWQgd2l0aCBiZWxvdyBmdW5jdGlvblxuICAgIGNvbnN0IGNyZWF0ZUdhbWVib2FyZCA9ICgpID0+e1xuICAgIFxuICAgIGZvcihsZXQgaT0wO2k8MTE7aSsrKXtcbiAgICAgICAgXG4gICAgXG4gICAgICAgIEdhbWVib2FyZE1vZHVsZS5jcmVhdGVHcmlkcyhcIjBcIiwwLGkpXG4gICAgICAgIEdhbWVib2FyZE1vZHVsZS5jcmVhdGVHcmlkcyhcIkFcIixpKTtcbiAgICAgICAgR2FtZWJvYXJkTW9kdWxlLmNyZWF0ZUdyaWRzKFwiQlwiLGkpO1xuICAgICAgICBHYW1lYm9hcmRNb2R1bGUuY3JlYXRlR3JpZHMoXCJDXCIsaSk7XG4gICAgICAgIEdhbWVib2FyZE1vZHVsZS5jcmVhdGVHcmlkcyhcIkRcIixpKTtcbiAgICAgICAgR2FtZWJvYXJkTW9kdWxlLmNyZWF0ZUdyaWRzKFwiRVwiLGkpO1xuICAgICAgICBHYW1lYm9hcmRNb2R1bGUuY3JlYXRlR3JpZHMoXCJGXCIsaSk7XG4gICAgICAgIEdhbWVib2FyZE1vZHVsZS5jcmVhdGVHcmlkcyhcIkdcIixpKTtcbiAgICAgICAgR2FtZWJvYXJkTW9kdWxlLmNyZWF0ZUdyaWRzKFwiSFwiLGkpO1xuICAgICAgICBHYW1lYm9hcmRNb2R1bGUuY3JlYXRlR3JpZHMoXCJJXCIsaSk7XG4gICAgICAgIEdhbWVib2FyZE1vZHVsZS5jcmVhdGVHcmlkcyhcIkpcIixpKTtcbiAgICBcbiAgICB9XG4gICAgfVxuICAgIHJldHVybiB7Y3JlYXRlR3JpZHMsY3JlYXRlR2FtZWJvYXJkfVxuICAgIH0pKCk7XG5cbiAgICBleHBvcnR7R2FtZWJvYXJkTW9kdWxlfTsiLCIvL3RoZSBjaG9vb3NlIGNvb3JkaW5hdGVzIGZ1bmN0aW9uXG5mdW5jdGlvbiBjaG9vc2VDcmRudHMoU3RydEx0dHJzLFN0cnRObyxsZW5ndGgsVm9ySCl7XG4gICAgbGV0IGNvb3JkID0gW107XG4gICAgXG4gICAgaWYoVm9ySD09PVwiVlwiKXtcbiAgICBsZXQgb3ZlciA9IDExLWxlbmd0aDtcbiAgICAvL2J1aWxkaW5nIGl0IHNvIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIG51bWJlciBpdCBrZWVwcyBpdCB3aXRoaW4gdGhlIGdyaWRcbiAgICBpZihTdHJ0Tm8+b3Zlcil7U3RydE5vID0gb3Zlcn1cbiAgICAvL2lmKFZvckg9PT1cIlZlcnRpY2FsXCIpe30gV2lsbCBiZSB0cmVhdGluZyB0aGlzIHRlc3RpbmcgYXMgY29tcGxldGUgdmVydGljYWwgcG9zaXRpb25pbmdcbiAgICBmb3IobGV0IGk9MTtpPGxlbmd0aCsxO2krKyl7XG4gICAgICAgIGNvb3JkLnB1c2goU3RydEx0dHJzICsgU3RydE5vKyspXG4gICAgfVxufVxuXG5lbHNlIGlmKFZvckg9PT1cIkhcIil7XG4gICAgbGV0IEx0ck51bWJlciA9IFN0cnRMdHRycy5jaGFyQ29kZUF0KDApXG4gICAgbGV0IG92ZXIgPSA3NS1sZW5ndGg7XG4gICAgLy9idWlsZGluZyBpdCBzbyB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBudW1iZXIgaXQga2VlcHMgaXQgd2l0aGluIHRoZSBncmlkXG4gICAgaWYoTHRyTnVtYmVyPm92ZXIpe0x0ck51bWJlciA9IG92ZXJ9XG4gICAgY29uc29sZS5sb2coTHRyTnVtYmVyKVxuICAgIGNvbnNvbGUubG9nKG92ZXIpXG4gICAgXG4gICAgZm9yKGxldCBpPTE7aTxsZW5ndGgrMTtpKyspe1xuICAgICAgICBjb29yZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoTHRyTnVtYmVyKyspICsgU3RydE5vKVxuICAgIH1cblxufVxuICAgIHJldHVybiBjb29yZDtcblxufVxuXG5leHBvcnQge2Nob29zZUNyZG50c30iLCIvL2NvZGUgZm9yIGlkZW50aWZ5aW5nIHdoZW4gdGhlIGNob3NlbiBjb29yZGluYXRlcyBvdmVybGFwIFxuLy93aXRoIGNvb3JkaW5hdGVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYXNzaWduZWRcblxuXG5cblxuXG5mdW5jdGlvbiBvdmVyTGFwKGEsYil7XG4vL1BsYz0gcGxheWVyIGNvb3JkaW5hdGVzICAgIFxubGV0IHBsYz1hO1xuLy9jcmQgaXMgdGhlIG5ldyBjb29yZGluYXRlc1xubGV0IGNyZCA9Yjtcbi8vdmFyaWFibGUgdG8gcmV0dXJuXG5sZXQgb3ZybGFwPTA7XG5cbmZvcihsZXQgej0wO3o8Y3JkLmxlbmd0aDt6Kyspe1xuZm9yKGxldCBwPTA7cDxwbGMubGVuZ3RoO3ArKyl7XG4gICAgZm9yKGxldCBpPTA7aTxwbGNbcF0uY29vcmRpbmF0ZXMubGVuZ3RoO2krKyl7XG4gICAgaWYocGxjW3BdLmNvb3JkaW5hdGVzW2ldPT09Y3JkW3pdKXtvdnJsYXArK31cbiAgICBcbn1cbn1cbn1cbmlmKG92cmxhcD4wKXtvdnJsYXA9XCJZXCJ9XG4gICAgZWxzZXtvdnJsYXA9XCJOXCJ9XG5yZXR1cm4gb3ZybGFwXG59XG5cbi8qXG5cbi8vc2Vjb25kIGF0dGVtcHQgZHVtYmluZyBpdCBkb3duXG5mdW5jdGlvbiBvdmVyTGFwKGEsYil7XG4gICAgLy9QbGM9IHBsYXllciBjb29yZGluYXRlcyAgICBcbiAgICBsZXQgcGxjPWE7XG4gICAgLy9jcmQgaXMgdGhlIG5ldyBjb29yZGluYXRlc1xuICAgIGxldCBjcmQgPWI7XG4gICAgLy92YXJpYWJsZSB0byByZXR1cm5cbiAgICBsZXQgb3ZybGFwID0wO1xuICAgIFxuICAgIGZvcihsZXQgcD0wO3A8cGxjLmxlbmd0aDtwKyspe1xuICAgIGZvcihsZXQgej0wO3o8Y3JkLmxlbmd0aDt6Kyspe1xuICAgICAgICBpZihwbGNbcF09PT1jcmRbel0pe292cmxhcCsrfVxuICAgICAgICBcbiAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmKG92cmxhcD4wKXtvdnJsYXA9XCJZXCJ9XG4gICAgZWxzZXtvdnJsYXA9XCJOXCJ9XG4gICAgcmV0dXJuIG92cmxhcFxuICAgIH1cbiAgICAqL1xuXG5leHBvcnQge292ZXJMYXB9IiwiaW1wb3J0e3BpcCxkaXJlY3Rpb24scGxheWVyMWNvb3JkLHBsYXllcjJjb29yZCxwbGF5ZXJCYXNlfSBmcm9tICcuL2luZGV4J1xuaW1wb3J0e2Nob29zZUNyZG50c30gZnJvbSAnLi9jaG9vc2VDb29yZGluYXRlcydcbmltcG9ydHtvdmVyTGFwfSBmcm9tICcuL292ZXJMYXAnXG5cblxuXG5mdW5jdGlvbiBzaGlwZmFjdG9yeShuYW1lLGNvb3JkaW5hdGVzKXtcbiAgICB0aGlzLm5hbWUgPSBuYW1lXG4gICAgdGhpcy5jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzXG4gICAgdGhpcy5oaXRTaGlwID0gKCk9PnthbGVydChcIllvdSBzdHJ1Y2sgdGhlIFwiICsgbmFtZSArIFwiIHNoaXBcIil9XG4gICAgdGhpcy5pc1N1bmsgPSAoKSA9PntpZihjb29yZGluYXRlcy5sZW5ndGg9PT0wKXthbGVydChcIllvdSBzdW5rIHRoZSBcIisgbmFtZSArXCIgc2hpcFwiKTt9fVxuICAgIFxuICB9XG5cbiAgbGV0IGNvb3JkaWQ7XG5cblxuICBjb25zdCBjYXJyaWVyID0gKHQpID0+eyAgICBcbiAgICB0LnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgIGxldCBsZXR0ZXIgPSB0LnRhcmdldC5kYXRhc2V0LmxldHRlcjtcbiAgICBsZXQgbnVtYmVyID0gdC50YXJnZXQuZGF0YXNldC5udW1iZXI7XG4gICAgLy9hbGVydChcIllvdXIgYmF0dGxlc2hpcCB3aWxsIGhhdmUgdGhlIGNvb3JkaW5hdGVzOiBcIitjaG9vc2VDcmRudHMobGV0dGVyLG51bWJlciw/PyxkaXJlY3Rpb24pKVxuICAgIGxldCBndW5uID0gbmV3IHNoaXBmYWN0b3J5KFwiQ2FycmllclwiLGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDIsZGlyZWN0aW9uKSlcbiAgICBsZXQgUEM7XG4gICAgaWYocGlwID09PSBwbGF5ZXJCYXNlWzBdKXtQQyA9IHBsYXllcjFjb29yZDsgY29vcmRpZCA9IFwicDFjXCJ9XG4gICAgZWxzZSBpZihwaXAgPT09IHBsYXllckJhc2VbMV0pe1BDID0gcGxheWVyMmNvb3JkOyBjb29yZGlkID0gXCJwMmNcIn1cbiBcbiAgICBQQy5wdXNoKGd1bm4pO1xuICBcbiAgICAgIGxldCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICAgIHAudGV4dENvbnRlbnQgPSAnQ2FycmllcicgK1wiLVwiKyBjaG9vc2VDcmRudHMobGV0dGVyLG51bWJlciwyLGRpcmVjdGlvbilcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvb3JkaWQpLmFwcGVuZENoaWxkKHApO1xuICAgIFxuICAgIHJldHVybiBQQztcbiAgICB9XG5cbiAgY29uc3QgYmF0dGxlc2hpcCA9ICh0KSA9PntcbiAgICB0LnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiO1xuICAgIGxldCBsZXR0ZXIgPSB0LnRhcmdldC5kYXRhc2V0LmxldHRlcjtcbiAgICBsZXQgbnVtYmVyID0gdC50YXJnZXQuZGF0YXNldC5udW1iZXI7XG4gICAgLy9hbGVydChcIllvdXIgYmF0dGxlc2hpcCB3aWxsIGhhdmUgdGhlIGNvb3JkaW5hdGVzOiBcIitjaG9vc2VDcmRudHMobGV0dGVyLG51bWJlciw/PyxkaXJlY3Rpb24pKVxuICAgIGxldCBndW5uID0gbmV3IHNoaXBmYWN0b3J5KFwiQmF0dGxlc2hpcFwiLGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDMsZGlyZWN0aW9uKSlcbiAgICBsZXQgUEM7XG4gICAgaWYocGlwID09PSBwbGF5ZXJCYXNlWzBdKXtQQyA9IHBsYXllcjFjb29yZDsgY29vcmRpZCA9IFwicDFjXCJ9XG4gICAgZWxzZSBpZihwaXAgPT09IHBsYXllckJhc2VbMV0pe1BDID0gcGxheWVyMmNvb3JkOyBjb29yZGlkID0gXCJwMmNcIn1cbiAgICBpZihvdmVyTGFwKFBDLGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDMsZGlyZWN0aW9uKSk9PT1cIllcIil7YWxlcnQoXCJUaGVzZSB0aWxlcyBoYXZlIGFscmVhZHkgYmVlbiBhc3NpZ25lZCwgcGxlYXNlIGNob29zZSBkaWZmZXJlbnQgdGlsZXNcIil9XG4gIGVsc2V7IFxuICAgIFBDLnB1c2goZ3Vubik7XG4gICAgXG5cbiAgICBsZXQgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpXG4gICAgICBwLnRleHRDb250ZW50ID0gJ0JhdHRsZVNoaXAnICtcIi1cIisgY2hvb3NlQ3JkbnRzKGxldHRlcixudW1iZXIsMyxkaXJlY3Rpb24pXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZGlkKS5hcHBlbmRDaGlsZChwKTtcbiAgfVxuICAgIHJldHVybiBQQztcbiAgfVxuICBjb25zdCBjcnVpc2VyID0gKHQpID0+e1xuICAgIHQudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgbGV0IGxldHRlciA9IHQudGFyZ2V0LmRhdGFzZXQubGV0dGVyO1xuICAgIGxldCBudW1iZXIgPSB0LnRhcmdldC5kYXRhc2V0Lm51bWJlcjtcbiAgICAvL2FsZXJ0KFwiWW91ciBiYXR0bGVzaGlwIHdpbGwgaGF2ZSB0aGUgY29vcmRpbmF0ZXM6IFwiK2Nob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLD8/LGRpcmVjdGlvbikpXG4gICAgbGV0IGd1bm4gPSBuZXcgc2hpcGZhY3RvcnkoXCJDcnVpc2VyXCIsY2hvb3NlQ3JkbnRzKGxldHRlcixudW1iZXIsNCxkaXJlY3Rpb24pKVxuICAgIGxldCBQQztcbiAgICBpZihwaXAgPT09IHBsYXllckJhc2VbMF0pe1BDID0gcGxheWVyMWNvb3JkOyBjb29yZGlkID0gXCJwMWNcIn1cbiAgICBlbHNlIGlmKHBpcCA9PT0gcGxheWVyQmFzZVsxXSl7UEMgPSBwbGF5ZXIyY29vcmQ7IGNvb3JkaWQgPSBcInAyY1wifVxuICAgIGlmKG92ZXJMYXAoUEMsY2hvb3NlQ3JkbnRzKGxldHRlcixudW1iZXIsNCxkaXJlY3Rpb24pKT09PVwiWVwiKXthbGVydChcIlRoZXNlIHRpbGVzIGhhdmUgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLCBwbGVhc2UgY2hvb3NlIGRpZmZlcmVudCB0aWxlc1wiKX1cbiAgICBlbHNleyBcbiAgICBQQy5wdXNoKGd1bm4pO1xuICAgIFxuXG4gICAgbGV0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKVxuICAgICAgcC50ZXh0Q29udGVudCA9ICdDcnVpc2VyJyArXCItXCIrIGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDQsZGlyZWN0aW9uKVxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRpZCkuYXBwZW5kQ2hpbGQocCk7XG4gICAgfVxuICAgIHJldHVybiBQQztcbiAgfVxuICBjb25zdCBzdWJtYXJpbmUgPSAodCkgPT57XG4gICAgdC50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICBsZXQgbGV0dGVyID0gdC50YXJnZXQuZGF0YXNldC5sZXR0ZXI7XG4gICAgbGV0IG51bWJlciA9IHQudGFyZ2V0LmRhdGFzZXQubnVtYmVyO1xuICAgIC8vYWxlcnQoXCJZb3VyIGJhdHRsZXNoaXAgd2lsbCBoYXZlIHRoZSBjb29yZGluYXRlczogXCIrY2hvb3NlQ3JkbnRzKGxldHRlcixudW1iZXIsPz8sZGlyZWN0aW9uKSlcbiAgICBsZXQgZ3VubiA9IG5ldyBzaGlwZmFjdG9yeShcIlN1Ym1hcmluZVwiLGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDUsZGlyZWN0aW9uKSlcbiAgICBsZXQgUEM7XG4gICAgaWYocGlwID09PSBwbGF5ZXJCYXNlWzBdKXtQQyA9IHBsYXllcjFjb29yZDsgY29vcmRpZCA9IFwicDFjXCJ9XG4gICAgZWxzZSBpZihwaXAgPT09IHBsYXllckJhc2VbMV0pe1BDID0gcGxheWVyMmNvb3JkOyBjb29yZGlkID0gXCJwMmNcIn1cbiAgICBpZihvdmVyTGFwKFBDLGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDUsZGlyZWN0aW9uKSk9PT1cIllcIil7YWxlcnQoXCJUaGVzZSB0aWxlcyBoYXZlIGFscmVhZHkgYmVlbiBhc3NpZ25lZCwgcGxlYXNlIGNob29zZSBkaWZmZXJlbnQgdGlsZXNcIil9XG4gICAgZWxzZXsgXG4gICAgUEMucHVzaChndW5uKTtcbiAgICBcblxuICAgIGxldCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIilcbiAgICAgIHAudGV4dENvbnRlbnQgPSAnU3VibWFyaW5lJyArXCItXCIrIGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDUsZGlyZWN0aW9uKVxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29vcmRpZCkuYXBwZW5kQ2hpbGQocCk7XG4gICAgfVxuICAgIHJldHVybiBQQztcbiAgfVxuICBjb25zdCBkZXN0cm95ZXIgPSAodCkgPT57XG4gICAgdC50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICBsZXQgbGV0dGVyID0gdC50YXJnZXQuZGF0YXNldC5sZXR0ZXI7XG4gICAgbGV0IG51bWJlciA9IHQudGFyZ2V0LmRhdGFzZXQubnVtYmVyO1xuICAgIC8vYWxlcnQoXCJZb3VyIGJhdHRsZXNoaXAgd2lsbCBoYXZlIHRoZSBjb29yZGluYXRlczogXCIrY2hvb3NlQ3JkbnRzKGxldHRlcixudW1iZXIsPz8sZGlyZWN0aW9uKSlcbiAgICBsZXQgZ3VubiA9IG5ldyBzaGlwZmFjdG9yeShcIkRlc3Ryb3llclwiLGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDYsZGlyZWN0aW9uKSlcbiAgICBsZXQgUEM7XG4gICAgaWYocGlwID09PSBwbGF5ZXJCYXNlWzBdKXtQQyA9IHBsYXllcjFjb29yZDsgY29vcmRpZCA9IFwicDFjXCJ9XG4gICAgZWxzZSBpZihwaXAgPT09IHBsYXllckJhc2VbMV0pe1BDID0gcGxheWVyMmNvb3JkOyBjb29yZGlkID0gXCJwMmNcIn1cbiAgICBpZihvdmVyTGFwKFBDLGNob29zZUNyZG50cyhsZXR0ZXIsbnVtYmVyLDYsZGlyZWN0aW9uKSk9PT1cIllcIil7YWxlcnQoXCJUaGVzZSB0aWxlcyBoYXZlIGFscmVhZHkgYmVlbiBhc3NpZ25lZCwgcGxlYXNlIGNob29zZSBkaWZmZXJlbnQgdGlsZXNcIil9XG4gICAgZWxzZXsgXG4gICAgUEMucHVzaChndW5uKTtcblxuICAgIFxuICAgIFxuXG4gICAgbGV0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKVxuICAgICAgcC50ZXh0Q29udGVudCA9ICdEZXN0cm95ZXInICtcIi1cIisgY2hvb3NlQ3JkbnRzKGxldHRlcixudW1iZXIsNixkaXJlY3Rpb24pXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb29yZGlkKS5hcHBlbmRDaGlsZChwKTtcbiAgICB9XG4gICAgcmV0dXJuIFBDO1xuICB9XG5cbiAgZXhwb3J0IHtzaGlwZmFjdG9yeSxjYXJyaWVyLGJhdHRsZXNoaXAsY3J1aXNlcixzdWJtYXJpbmUsZGVzdHJveWVyfSIsImltcG9ydCB7c3EsZGlyZWN0aW9uLHBsYXllcjFjb29yZCxwbGF5ZXIyY29vcmR9IGZyb20gJy4vaW5kZXgnXG5jb25zdCBkb21Nb2R1bGUgPSAoKCkgPT57XG4vL2Z1bmN0aW9uIGZvciBoaWdobGlnaHRpbmcgc3F1YXJlcyB3aGVuIGhvdmVyaW5nXG5mdW5jdGlvbiBob3Zlcih0KXt0LnRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJncmVlblwiO1xubGV0IG51bWIgPSB0LnRhcmdldC5kYXRhc2V0Lm51bWJlcjtcbmxldCBsZXR0ZXJyID0gdC50YXJnZXQuZGF0YXNldC5sZXR0ZXJcbmlmKGRpcmVjdGlvbj09PVwiVlwiKXtcbiAgICBsZXQgb3ZlciA9IDExLXNxO1xuICAgIC8vYnVpbGRpbmcgaXQgc28gd2hlbiB0aGUgdXNlciBzZWxlY3RzIGEgbnVtYmVyIGl0IGtlZXBzIGl0IHdpdGhpbiB0aGUgZ3JpZFxuICAgIGlmKG51bWI+b3Zlcil7bnVtYiA9IG92ZXJ9XG5mb3IobGV0IGk9MDtpPHNxO2krKyl7XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChsZXR0ZXJyKygrbnVtYitpKSkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmV5XCJ9fVxuZWxzZSBpZihkaXJlY3Rpb249PT1cIkhcIil7XG4gICAgbGV0IEx0ck51bWJlciA9bGV0dGVyci5jaGFyQ29kZUF0KDApXG4gICAgbGV0IG92ZXIgPSA3NS1zcTtcbiAgICAvL2J1aWxkaW5nIGl0IHNvIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIG51bWJlciBpdCBrZWVwcyBpdCB3aXRoaW4gdGhlIGdyaWRcbiAgICBpZihMdHJOdW1iZXI+b3Zlcil7THRyTnVtYmVyID0gb3Zlcn1cbiAgICBmb3IobGV0IGk9MDtpPHNxO2krKyl7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoU3RyaW5nLmZyb21DaGFyQ29kZShMdHJOdW1iZXIrKykgKyBudW1iKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJncmV5XCJ9XG59XG59XG5cbi8vZnVuY3Rpb24gZm9yIHJldHVybmluZyBzcXVhcmUgY29sb3IgdG8gd2hpdGUgYWZ0ZXIgbGVhdmluZ1xuZnVuY3Rpb24gbGVhdmUodCl7dC50YXJnZXQuc3R5bGUuYmFja2dyb3VuZENvbG9yPVwid2hpdGVcIjtcbmxldCBudW1iID0gdC50YXJnZXQuZGF0YXNldC5udW1iZXI7XG5sZXQgbGV0dGVyciA9IHQudGFyZ2V0LmRhdGFzZXQubGV0dGVyXG5pZihkaXJlY3Rpb249PT1cIlZcIil7XG4gICAgbGV0IG92ZXIgPSAxMS1zcTtcbiAgICAvL2J1aWxkaW5nIGl0IHNvIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIG51bWJlciBpdCBrZWVwcyBpdCB3aXRoaW4gdGhlIGdyaWRcbiAgICBpZihudW1iPm92ZXIpe251bWIgPSBvdmVyfVxuICAgIGZvcihsZXQgaT0wO2k8c3E7aSsrKXtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsZXR0ZXJyKygrbnVtYitpKSkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwifX1cbiAgICBlbHNlIGlmKGRpcmVjdGlvbj09PVwiSFwiKXtcbiAgICAgICAgbGV0IEx0ck51bWJlciA9bGV0dGVyci5jaGFyQ29kZUF0KDApXG4gICAgICAgIGxldCBvdmVyID0gNzUtc3E7XG4gICAgLy9idWlsZGluZyBpdCBzbyB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBudW1iZXIgaXQga2VlcHMgaXQgd2l0aGluIHRoZSBncmlkXG4gICAgaWYoTHRyTnVtYmVyPm92ZXIpe0x0ck51bWJlciA9IG92ZXJ9XG4gICAgICAgIGZvcihsZXQgaT0wO2k8c3E7aSsrKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoU3RyaW5nLmZyb21DaGFyQ29kZShMdHJOdW1iZXIrKykgKyBudW1iKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJ3aGl0ZVwifVxuICAgIH1cbiAgICB9XG5cbiAgICAvL3JlbWVtYmVyIHRvIGltcGxlbWVudCB0aGlzIGJlZm9yZSBmaW5pc2hpbmcgdXAgdGhlIHByb2plY3RcbiAgICAvLyoqKlxuICAgIGZ1bmN0aW9uIHNob3dDb29yZHAoKXtcbiAgICBmb3IobGV0IGk9MDtpPHBsYXllcjFjb29yZC5sZW5ndGg7aSsrKXtcbiAgICAgICAgbGV0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKVxuICAgICAgICBwLnRleHRDb250ZW50ID0gcGxheWVyMWNvb3JkW2ldLm5hbWUgKyctJytwbGF5ZXIxY29vcmRbaV0uY29vcmRpbmF0ZXM7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicDFjXCIpLmFwcGVuZENoaWxkKHApO1xuICAgICAgfVxuXG4gICAgICBmb3IobGV0IGk9MDtpPHBsYXllcjJjb29yZC5sZW5ndGg7aSsrKXtcbiAgICAgICAgbGV0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKVxuICAgICAgICBwLnRleHRDb250ZW50ID0gcGxheWVyMmNvb3JkW2ldLm5hbWUgKyctJytwbGF5ZXIyY29vcmRbaV0uY29vcmRpbmF0ZXM7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicDJjXCIpLmFwcGVuZENoaWxkKHApO1xuICAgICAgfX1cblxucmV0dXJuIHtob3ZlcixsZWF2ZSxzaG93Q29vcmRwfVxufSkoKTtcblxuXG5leHBvcnR7ZG9tTW9kdWxlfSIsImltcG9ydCB7R2FtZWJvYXJkTW9kdWxlfSBmcm9tICcuL2dhbWVib2FyZCdcbmltcG9ydCB7Y2FycmllcixiYXR0bGVzaGlwLGNydWlzZXIsc3VibWFyaW5lLGRlc3Ryb3llcn0gZnJvbSAnLi9zaGlwcydcbmltcG9ydCB7ZG9tTW9kdWxlfSBmcm9tICcuL2RvbSdcblxuXG4gIC8vY29vcmRpbmF0ZXMgb2YgZWFjaCBwbGF5ZXJzIHNoaXAsIGp1c3QgZm9yIHRlc3RpbmcgdW50aWwgd2UgdXNlIG11bHRpcGxlIHNoaXBzXG4gIGxldCBwbGF5ZXIxY29vcmQ9W107XG4gIGxldCBwbGF5ZXIyY29vcmQ9W107XG4gIGxldCBwbGF5ZXIxU3Vua1NoaXBzPTA7XG4gIGxldCBwbGF5ZXIyU3Vua1NoaXBzPTA7XG4gIC8vVj1WZXJ0aWNhbCwgSD1Ib3Jpem9udGFsXG4gIGxldCBkaXJlY3Rpb24gPSBcIlZcIlxuICAvL3BsYXllciBpbiBwbGF5XG4gIGxldCBwbGF5ZXJCYXNlID0gW1wicGxheWVyMVwiLFwicGxheWVyMlwiXTtcbiAgbGV0IHBpcCA9IHBsYXllckJhc2VbMF07XG4gIGxldCBQY3JkID0gcGxheWVyMWNvb3JkO1xuICBpZihwaXAgPT09IHBsYXllckJhc2VbMF0pe1BjcmQgPSBwbGF5ZXIxY29vcmQ7fVxuICBlbHNlIGlmKHBpcCA9PT0gcGxheWVyQmFzZVsxXSl7UGNyZCA9IHBsYXllcjJjb29yZDt9XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGlwXCIpLnRleHRDb250ZW50ID0gcGlwO1xuICAvL3RoZSBzcXVhcmVzIHRoYXQgbmVlZCBoaWdobGlnaHRpbmcgZm9yIHRoZSBkb21cbiAgbGV0IHNxO1xuICBcblxuLy9idXR0b24gdG8gY2hhbmdlIHRoZSBwb3NpdGlvbmluZyBvZiB0aGUgcGxhY2VtZW50XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIkNobmdlXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKT0+e2lmKGRpcmVjdGlvbj09PVwiVlwiKXtkaXJlY3Rpb249XCJIXCI7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwb3NpdGlvblwiKS50ZXh0Q29udGVudD1cIkhvcml6b250YWxcIjt9ZWxzZSBpZihkaXJlY3Rpb249PT1cIkhcIil7ZGlyZWN0aW9uPVwiVlwiO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicG9zaXRpb25cIikudGV4dENvbnRlbnQ9XCJWZXJ0aWNhbFwifX0pXG5cblxuLy9mdW5jdGlvbiBjaGFuZ2VzIHBsYXllclxuY29uc3QgY2hhblBsYXllciA9ICgpPT57XG4gICAgaWYocGlwID09PSBwbGF5ZXJCYXNlWzBdKXtwaXAgPSBwbGF5ZXJCYXNlWzFdOyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpcFwiKS50ZXh0Q29udGVudCA9IHBpcDt9XG4gICAgZWxzZSBpZihwaXAgPT09IHBsYXllckJhc2VbMV0pe3BpcCA9IHBsYXllckJhc2VbMF07ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwaXBcIikudGV4dENvbnRlbnQgPSBwaXA7fVxuICAgIGVsc2V7cGlwID0gcGxheWVyQmFzZVswXTtkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBpcFwiKS50ZXh0Q29udGVudCA9IHBpcDt9XG5cbn1cblxuXG4vL2JlbG93IGZ1bmN0aW9ucyBuZWVkIHRvIGJlIGdyb3VwZWQgaW50byBhIG1vZHVsZVxuXG5mdW5jdGlvbiBoaXQodCl7Y29uc29sZS5sb2codC50YXJnZXQuZGF0YXNldC5sZXR0ZXIpO1xuICAgIGxldCBQQyA9IHBsYXllcjFjb29yZDtcbiAgICBsZXQgTCA9IHQudGFyZ2V0LmRhdGFzZXQubGV0dGVyO1xuICAgIGxldCBOID0gdC50YXJnZXQuZGF0YXNldC5udW1iZXI7XG4gICAgbGV0IGhpdENvb3JkID0gTCtOO1xuICAgIGNvbnNvbGUubG9nKGhpdENvb3JkKTtcbiAgICBjb25zb2xlLmxvZyhQQy5sZW5ndGgpO1xuICAgIFxuICAgIFxuICAgIFxuICAgIGlmKHBpcCA9PT0gcGxheWVyQmFzZVswXSl7UEMgPSBwbGF5ZXIyY29vcmQ7fVxuICAgIGVsc2UgaWYocGlwID09PSBwbGF5ZXJCYXNlWzFdKXtQQyA9IHBsYXllcjFjb29yZDt9XG4gICAgZm9yKGxldCBwPTA7cDxQQy5sZW5ndGg7cCsrKXtcbiAgICAgICAgZm9yKGxldCBpPTA7aTxQQ1twXS5jb29yZGluYXRlcy5sZW5ndGg7aSsrKXtcbiAgICAgICAgaWYoUENbcF0uY29vcmRpbmF0ZXNbaV09PT1oaXRDb29yZCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhQQ1twXS5jb29yZGluYXRlcylcbiAgICAgICAgICAgIFBDW3BdLmNvb3JkaW5hdGVzLnNwbGljZShpLDEpXG4gICAgICAgIFBDW3BdLmhpdFNoaXAoKTtcbiAgICAgICAgUENbcF0uaXNTdW5rKCk7ICAgICAgICBcbiAgICAgICAgZ2FtZU92ZXIoKTtcbiAgICAgICAgY29uc29sZS5sb2coUENbcF0uY29vcmRpbmF0ZXMpXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUGxheWVyIG9uZSBzdW5rIHNoaXBzOiBcIisgcGxheWVyMVN1bmtTaGlwcykgIFxuICAgICAgICBjb25zb2xlLmxvZyhcIlBsYXllciB0d28gc3VuayBzaGlwczogXCIrIHBsYXllcjJTdW5rU2hpcHMpICBcbiAgICAgICAgXG4gICAgICAgIH19XG4gICAgfVxuICAgIGNoYW5QbGF5ZXIoKTt9XG5cblxuIGZ1bmN0aW9uIGdhbWVPdmVyKCl7XG4gICAgbGV0IGNvdW50ID0wO1xuICAgIGxldCBQQyA9IHBsYXllcjFjb29yZDtcbiAgICBsZXQgcGxyO1xuICAgIGlmKHBpcCA9PT0gcGxheWVyQmFzZVswXSl7UEMgPSBwbGF5ZXIyY29vcmQ7IHBscj1cIlBsYXllciBPbmVcIn1cbiAgICBlbHNlIGlmKHBpcCA9PT0gcGxheWVyQmFzZVsxXSl7UEMgPSBwbGF5ZXIxY29vcmQ7IHBscj1cIlBsYXllciBUd29cIn1cbiAgICBmb3IobGV0IGkgPTA7aTxQQy5sZW5ndGg7aSsrKXtcbiAgICAgICBpZihQQ1tpXS5jb29yZGluYXRlcy5sZW5ndGg9PT0wKXsrK2NvdW50fVxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhjb3VudCk7XG4gICAgaWYoY291bnQ9PT01KXthbGVydCggcGxyKyBcIiBoYXMgd29uIVwiKX1cbiAgICB9XG4gICAgXG5cbmZ1bmN0aW9uIHN0YXJ0R2FtZSgpe1xuICAgIHNxPTFcbiAgICBjaGFuUGxheWVyKCk7XG4gICAgbGV0IGNlbGxzPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNlbGxcIik7XG5mb3IobGV0IGk9MDtpPGNlbGxzLmxlbmd0aDtpKyspe1xuICAgIGNlbGxzW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxkZXN0cm95ZXIpIFxuY2VsbHNbaV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLHN0YXJ0R2FtZSlcbmNlbGxzW2ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcbn1cbnBsYXlHYW1lKCk7fVxuICAgIFxuICAgIFxuZnVuY3Rpb24gcGxheUdhbWUoKXtcbiAgICBcbiAgICBsZXQgY2VsbHM9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2VsbFwiKTtcbmZvcihsZXQgaT0wO2k8Y2VsbHMubGVuZ3RoO2krKyl7XG5cbmNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxoaXQpXG5jZWxsc1tpXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIndoaXRlXCI7XG5jZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCh0KT0+e3QudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvcj1cInJlZFwifSlcbmNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCh0KT0+e3QudGFyZ2V0LnN0eWxlLmJhY2tncm91bmRDb2xvcj1cIndoaXRlXCJ9KVxufVxuXG59XG5cblxuXG5cbi8vU2VsZWN0aW9uIG1vZHVsZVxuY29uc3Qgc2VsZWN0aW9uTW9kdWxlID0gKCgpID0+e1xuICAgIFxuICAgIFxuXG4gICAgICAgIFxuICAgIC8vYWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBldmVyeSBncmlkIGNlbGwgYWxsb3dpbmcgdXMgdG8gY2hvb3NlIG91ciBjb29yZGluYXRlcyxtYXAgdGhlbSB0byB0aGUgYXJyYXkgdGhlbiBjaGFuZ2UgcGxheWVyXG4gICAgZnVuY3Rpb24gcDFjYXJyaWVyU2hpcCgpe1xuICAgICAgIFxuICAgICAgICBsZXQgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNlbGxcIilcbiAgICAgICAgLy9zcSBpcyBjb250cm9sbGluZyB0aGUgaGlnaGxpZ2h0aW5nIG51bWJlclxuICAgICAgICBzcT0yO1xuICAgICAgICBmb3IobGV0IGk9MDtpPGNlbGxzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgY2VsbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGNhcnJpZXIpIFxuICAgICAgICAgICAgY2VsbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLHNlbGVjdGlvbk1vZHVsZS5wMWJhdHRsZVNoaXApIFxuICAgICAgICAgICAgY2VsbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJyxkb21Nb2R1bGUuaG92ZXIpXG4gICAgICAgIGNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLGRvbU1vZHVsZS5sZWF2ZSlcbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgZnVuY3Rpb24gcDFiYXR0bGVTaGlwKCl7ICAgXG4gICAgICAgIFxuICAgICAgICBsZXQgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNlbGxcIilcbiAgICAgICAgXG4gICAgICAgIC8vc3EgaXMgY29udHJvbGxpbmcgdGhlIGhpZ2hsaWdodGluZyBudW1iZXJcbiAgICAgICAgc3E9MztcbiAgICAgICAgZm9yKGxldCBpPTA7aTxjZWxscy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGNlbGxzW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxjYXJyaWVyKSBcbiAgICAgICAgICAgIGNlbGxzW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxzZWxlY3Rpb25Nb2R1bGUucDFiYXR0bGVTaGlwKSBcbiAgICAgICAgICAgIGNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxiYXR0bGVzaGlwKSBcbiAgICAgICAgICAgIC8vaWYgY29vcmRpbmF0ZXMgbWF0Y2ggbGVuZ3RoIG5lZWRlZCBtb3ZlIG9udG8gbmV4dCBwYXJ0XG4gICAgICAgICAgICBjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsc2VsZWN0aW9uTW9kdWxlLnAxY3J1aXNlclNoaXApIFxuICAgICAgICAgICAgY2VsbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJyxkb21Nb2R1bGUuaG92ZXIpXG4gICAgICAgIGNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLGRvbU1vZHVsZS5sZWF2ZSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG5cbiAgICBmdW5jdGlvbiBwMWNydWlzZXJTaGlwKCl7XG5cbiAgICAgICAgaWYoUGNyZC5sZW5ndGg+MSl7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhQY3JkKVxuICAgICAgICBsZXQgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNlbGxcIilcbiAgICAgICAgXG4gICAgICAgIC8vc3EgaXMgY29udHJvbGxpbmcgdGhlIGhpZ2hsaWdodGluZyBudW1iZXJcbiAgICAgICAgc3E9NDtcbiAgICAgICAgZm9yKGxldCBpPTA7aTxjZWxscy5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGNlbGxzW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxiYXR0bGVzaGlwKSBcbiAgICAgICAgICAgIGNlbGxzW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxzZWxlY3Rpb25Nb2R1bGUucDFjcnVpc2VyU2hpcCkgXG4gICAgICAgICAgICBjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsY3J1aXNlcikgXG4gICAgICAgICAgICBjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsc2VsZWN0aW9uTW9kdWxlLnAxc3VibWFyaW5lU2hpcCkgXG4gICAgICAgICAgICBjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLGRvbU1vZHVsZS5ob3ZlcilcbiAgICAgICAgY2VsbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsZG9tTW9kdWxlLmxlYXZlKVxuICAgICAgICB9XG4gICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHAxc3VibWFyaW5lU2hpcCgpe1xuXG4gICAgICAgIGlmKFBjcmQubGVuZ3RoPjIpe1xuICAgICAgICBcbiAgICAgICAgbGV0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jZWxsXCIpXG4gICAgICAgIFxuICAgICAgICAvL3NxIGlzIGNvbnRyb2xsaW5nIHRoZSBoaWdobGlnaHRpbmcgbnVtYmVyXG4gICAgICAgIHNxPTU7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8Y2VsbHMubGVuZ3RoO2krKyl7XG4gICAgICAgICAgICBjZWxsc1tpXS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsY3J1aXNlcikgXG4gICAgICAgICAgICBjZWxsc1tpXS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsc2VsZWN0aW9uTW9kdWxlLnAxc3VibWFyaW5lU2hpcCkgXG4gICAgICAgICAgICBjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsc3VibWFyaW5lKSBcbiAgICAgICAgICAgIGNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxzZWxlY3Rpb25Nb2R1bGUucDFkZXN0cm95ZXJTaGlwKSBcbiAgICAgICAgICAgIGNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsZG9tTW9kdWxlLmhvdmVyKVxuICAgICAgICBjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJyxkb21Nb2R1bGUubGVhdmUpXG4gICAgICAgIH1cbiAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcDFkZXN0cm95ZXJTaGlwKCl7XG5cbiAgICAgICAgaWYoUGNyZC5sZW5ndGg+Myl7XG4gICAgICAgIGxldCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2VsbFwiKVxuICAgICAgICBcbiAgICAgICAgLy9zcSBpcyBjb250cm9sbGluZyB0aGUgaGlnaGxpZ2h0aW5nIG51bWJlclxuICAgICAgICBzcT02O1xuICAgICAgICBmb3IobGV0IGk9MDtpPGNlbGxzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgY2VsbHNbaV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLHN1Ym1hcmluZSkgXG4gICAgICAgICAgICBjZWxsc1tpXS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsc2VsZWN0aW9uTW9kdWxlLnAxZGVzdHJveWVyU2hpcCkgXG4gICAgICAgICAgICBjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsZGVzdHJveWVyKSBcbiAgICAgICAgICAgIC8vdGhpcyBkZWNpZGVzIHdoZXRoZXIgdGhlIGdhbWUgc3RhcnRzIGFmdGVyIHBsYXllciB0d28gb3IgdGhlIGNvbXB1dGVyIGhhcyBzZWxlY3RlZCB0aGVpciBncmlkc1xuICAgICAgICAgICAgLy9pZiBub3QgaXQgbG9vcHMgYXJvdW5kXG4gICAgICAgICAgICBpZihwaXAgPT09IHBsYXllckJhc2VbMV0pe2NlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxzdGFydEdhbWUpfVxuICAgICAgIGVsc2UgaWYocGlwID09PSBwbGF5ZXJCYXNlWzBdKXtjZWxsc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsc2VsZWN0aW9uTW9kdWxlLmxvb3ApIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2VsbHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJyxkb21Nb2R1bGUuaG92ZXIpXG4gICAgICAgIGNlbGxzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLGRvbU1vZHVsZS5sZWF2ZSlcbiAgICAgICAgfVxuICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb29wKCl7XG4gICAgICAgIGlmKFBjcmQubGVuZ3RoPjQpe1xuXG4gICAgICAgIC8vVGhpcyBmdW5jdGlvbiB0dXJucyB0aGUgc2VsZWN0aW9uIHByb2Nlc3Mgb3ZlciB0byBlaXRoZXIgYSBjb21wdXRlciBvciBwbGF5ZXIgMlxuICAgIC8vanVzdCBkb2luZyBwbGF5ZXIgMiBpbXBsZW1ldGF0aW9uIGZvciBub3dcbiAgICBjaGFuUGxheWVyKCk7XG4gICAgICAgIGxldCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2VsbFwiKVxuICAgIFxuICAgICAgICBmb3IobGV0IGk9MDtpPGNlbGxzLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgY2VsbHNbaV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLGRlc3Ryb3llcikgXG4gICAgICAgICAgICBjZWxsc1tpXS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsc2VsZWN0aW9uTW9kdWxlLmxvb3ApIFxuICAgICAgICAgICAgY2VsbHNbaV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIH1cbnNlbGVjdGlvbk1vZHVsZS5wMWNhcnJpZXJTaGlwKCk7XG59XG4gICAgfVxuXG5cbiAgICBcbiAgICAgICAgcmV0dXJue3AxY2FycmllclNoaXAscDFiYXR0bGVTaGlwLHAxY3J1aXNlclNoaXAscDFzdWJtYXJpbmVTaGlwLHAxZGVzdHJveWVyU2hpcCxsb29wfVxuICAgIFxuICAgIH0pKCk7XG5cblxuXG5cblxuICAgIEdhbWVib2FyZE1vZHVsZS5jcmVhdGVHYW1lYm9hcmQoKTtcbnNlbGVjdGlvbk1vZHVsZS5wMWNhcnJpZXJTaGlwKCk7XG5cblxuXG5leHBvcnQge3NxLGRpcmVjdGlvbixwaXAscGxheWVyMWNvb3JkLHBsYXllcjJjb29yZCxwbGF5ZXJCYXNlLGNoYW5QbGF5ZXIscGxheWVyMVN1bmtTaGlwcyxwbGF5ZXIyU3Vua1NoaXBzfVxuXG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiR2FtZWJvYXJkTW9kdWxlIiwiY3JlYXRlR3JpZHMiLCJsdHIiLCJubyIsImlkIiwiZ3JpZCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwicGFkZGluZyIsImJvcmRlciIsInRleHRDb250ZW50IiwidGV4dEFsaWduIiwiZGF0YXNldCIsImhpdCIsImxldHRlciIsIm51bWJlciIsImNsYXNzTGlzdCIsImFkZCIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRCeUlkIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVHYW1lYm9hcmQiLCJpIiwiY2hvb3NlQ3JkbnRzIiwiU3RydEx0dHJzIiwiU3RydE5vIiwibGVuZ3RoIiwiVm9ySCIsImNvb3JkIiwib3ZlciIsInB1c2giLCJMdHJOdW1iZXIiLCJjaGFyQ29kZUF0IiwiY29uc29sZSIsImxvZyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIm92ZXJMYXAiLCJhIiwiYiIsInBsYyIsImNyZCIsIm92cmxhcCIsInoiLCJwIiwiY29vcmRpbmF0ZXMiLCJzaGlwZmFjdG9yeSIsIm5hbWUiLCJ0aGlzIiwiaGl0U2hpcCIsImFsZXJ0IiwiaXNTdW5rIiwiY29vcmRpZCIsImNhcnJpZXIiLCJ0IiwidGFyZ2V0IiwiYmFja2dyb3VuZENvbG9yIiwiUEMiLCJndW5uIiwiZGlyZWN0aW9uIiwicGlwIiwicGxheWVyQmFzZSIsInBsYXllcjFjb29yZCIsInBsYXllcjJjb29yZCIsImJhdHRsZXNoaXAiLCJjcnVpc2VyIiwic3VibWFyaW5lIiwiZGVzdHJveWVyIiwiZG9tTW9kdWxlIiwibnVtYiIsImxldHRlcnIiLCJzcSIsIlBjcmQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2hhblBsYXllciIsImhpdENvb3JkIiwic3BsaWNlIiwiZ2FtZU92ZXIiLCJwbHIiLCJjb3VudCIsInN0YXJ0R2FtZSIsImNlbGxzIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwbGF5R2FtZSIsInNlbGVjdGlvbk1vZHVsZSIsInAxY2FycmllclNoaXAiLCJwMWJhdHRsZVNoaXAiLCJwMWNydWlzZXJTaGlwIiwicDFzdWJtYXJpbmVTaGlwIiwicDFkZXN0cm95ZXJTaGlwIiwibG9vcCJdLCJzb3VyY2VSb290IjoiIn0=