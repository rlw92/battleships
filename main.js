(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>v,o7:()=>L,P4:()=>B,VL:()=>E,hJ:()=>b,yR:()=>k,He:()=>C,w7:()=>S,sq:()=>f});const t={createGrids:(e,t,n)=>{let r=document.createElement("div");r.style.padding="10px",r.style.border=0===n||0===t?"none":"solid black 2px",r.textContent=n,r.style.textAlign="center",0===n&&"0"===e?r.textContent=t:0===t&&"0"!=e&&(r.textContent=e),r.dataset.hit="No",r.dataset.P1hit="N",r.dataset.P2hit="N",r.dataset.letter=e,r.dataset.number=t,r.classList.add("cell"),r.setAttribute("id",r.dataset.letter+r.dataset.number),document.getElementById("gameboard1").appendChild(r)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function n(e,t,n,r){let l=[];if("V"===r){let r=11-n;t>r&&(t=r);for(let r=1;r<n+1;r++)l.push(e+t++)}else if("H"===r){let r=e.charCodeAt(0),o=75-n;r>o&&(r=o),console.log(r),console.log(o);for(let e=1;e<n+1;e++)l.push(String.fromCharCode(r++)+t)}return l}function r(e,t){let n=e,r=t,l=0;for(let e=0;e<r.length;e++)for(let t=0;t<n.length;t++)for(let o=0;o<n[t].coordinates.length;o++)n[t].coordinates[o]===r[e]&&l++;return l=l>0?"Y":"N",l}function l(e,t){this.name=e,this.coordinates=t,this.hitShip=()=>{alert("You struck the "+e+" ship")},this.isSunk=()=>{0===t.length&&alert("You sunk the "+e+" ship")}}let o;const a=e=>{e.target.style.backgroundColor="red";let t,r=e.target.dataset.letter,a=e.target.dataset.number,i=new l("Carrier",n(r,a,2,L));if("0"===a)console.log("Stay in the grid.");else{B===S[0]?(t=E,o="p1c"):B===S[1]&&(t=k,o="p2c"),t.push(i);let e=document.createElement("p");e.textContent="Carrier-"+n(r,a,2,L),document.getElementById(o).appendChild(e)}return t},i=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Battleship",n(a,i,3,L));if("0"===i)console.log("Stay in the grid.");else if(B===S[0]?(t=E,o="p1c"):B===S[1]&&(t=k,o="p2c"),"Y"===r(t,n(a,i,3,L)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="BattleShip-"+n(a,i,3,L),document.getElementById(o).appendChild(e)}return t},s=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Cruiser",n(a,i,4,L));if("0"===i)console.log("Stay in the grid.");else if(B===S[0]?(t=E,o="p1c"):B===S[1]&&(t=k,o="p2c"),"Y"===r(t,n(a,i,4,L)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Cruiser-"+n(a,i,4,L),document.getElementById(o).appendChild(e)}return t},d=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Submarine",n(a,i,5,L));if("0"===i)console.log("Stay in the grid.");else if(B===S[0]?(t=E,o="p1c"):B===S[1]&&(t=k,o="p2c"),"Y"===r(t,n(a,i,5,L)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Submarine-"+n(a,i,5,L),document.getElementById(o).appendChild(e)}return t},c=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,i=e.target.dataset.number,s=new l("Destroyer",n(a,i,6,L));if("0"===i)console.log("Stay in the grid.");else if(B===S[0]?(t=E,o="p1c"):B===S[1]&&(t=k,o="p2c"),"Y"===r(t,n(a,i,6,L)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(s);let e=document.createElement("p");e.textContent="Destroyer-"+n(a,i,6,L),document.getElementById(o).appendChild(e)}return t},u=function(e){let t=e.target.dataset.number,n=e.target.dataset.letter,r="blue";if("V"===L){let e=11-f;t>e&&(t=e),r="0"===t?"white":"grey";for(let e=0;e<f;e++)document.getElementById(n+(+t+e)).style.backgroundColor=r}else if("H"===L){let e=n.charCodeAt(0),r=75-f;e>r&&(e=r);for(let n=0;n<f;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.backgroundColor="white";let t=e.target.dataset.number,n=e.target.dataset.letter,r=n+t;if(console.log(r),"V"===L){let e=11-f;t>e&&(t=e);for(let e=0;e<f;e++)document.getElementById(n+(+t+e)).style.backgroundColor="white"}else if("H"===L){let e=n.charCodeAt(0),r=75-f;e>r&&(e=r);for(let n=0;n<f;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}},h=function(){let e=b;B===S[0]?e=b:B===S[1]&&(e=C);for(let t=0;t<e.length;t++)console.log(e[t]),document.getElementById(e[t]).style.backgroundColor="red"},m=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},p=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},y=function(e){B===S[0]?v=e.target.dataset.P1hit:B===S[1]&&(v=e.target.dataset.P2hit),console.log(v),"Y"===v?e.target.style.backgroundColor="red":"N"===v&&(e.target.style.backgroundColor="white")};let f,v,E=[],k=[],b=[],C=[],L="V",S=["player1","player2"],B=S[0],w=E;B===S[0]?w=E:B===S[1]&&(w=k),document.getElementById("pip").textContent=B,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===L?(L="H",document.getElementById("position").textContent="Horizontal"):"H"===L&&(L="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("click",h);const I=()=>{B===S[0]?(B=S[1],w=k,document.getElementById("pip").textContent=B):B===S[1]?(B=S[0],w=E,document.getElementById("pip").textContent=B):(B=S[0],w=k,document.getElementById("pip").textContent=B),m(),h()};function x(e){console.log(e.target.dataset.letter);let t=E,n=b,r=e.target.dataset.letter,l=e.target.dataset.number,o=r+l;if(console.log(o),console.log(t.length),"0"===l)console.log("Stay in the grid.");else{B===S[0]?(t=k,n=b,v=e.target.dataset.P1hit="Y"):B===S[1]&&(t=E,n=C,v=e.target.dataset.P2hit="Y");for(let e=0;e<t.length;e++)for(let n=0;n<t[e].coordinates.length;n++)t[e].coordinates[n]===o&&(console.log(t[e].coordinates),t[e].coordinates.splice(n,1),t[e].hitShip(),t[e].isSunk(),A(),console.log(t[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));n.push(o),console.log("P1 strikes: "+b),console.log("P2 strikes: "+C),I()}}function A(){let e,t=0,n=E;B===S[0]?(n=k,e="Player One"):B===S[1]&&(n=E,e="Player Two");for(let e=0;e<n.length;e++)0===n[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function G(){if(w.length>4){f=1,I();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",G),e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block";!function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",x),e[t].style.backgroundColor="white",e[t].removeEventListener("mouseover",u),e[t].removeEventListener("mouseleave",g),e[t].addEventListener("mouseover",p),e[t].addEventListener("mouseleave",y)}()}}const P={p1carrierShip:function(){let e=document.querySelectorAll(".cell");f=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",a),e[t].addEventListener("click",P.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){if(w.length>0){let e=document.querySelectorAll(".cell");f=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",P.p1battleShip),e[t].addEventListener("click",i),e[t].addEventListener("click",P.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1cruiserShip:function(){if(w.length>1){console.log(w);let e=document.querySelectorAll(".cell");f=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",P.p1cruiserShip),e[t].addEventListener("click",s),e[t].addEventListener("click",P.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1submarineShip:function(){if(w.length>2){let e=document.querySelectorAll(".cell");f=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",P.p1submarineShip),e[t].addEventListener("click",d),e[t].addEventListener("click",P.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1destroyerShip:function(){if(w.length>3){let e=document.querySelectorAll(".cell");f=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",P.p1destroyerShip),e[t].addEventListener("click",c),B===S[1]?e[t].addEventListener("click",G):B===S[0]&&e[t].addEventListener("click",P.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},loop:function(){if(w.length>4){I();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",P.loop),e[t].style.backgroundColor="white";P.p1carrierShip()}}};t.createGameboard(),P.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,