(()=>{"use strict";var e={d:(t,n)=>{for(var l in n)e.o(n,l)&&!e.o(t,l)&&Object.defineProperty(t,l,{enumerable:!0,get:n[l]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>b,zf:()=>k,o5:()=>x,o7:()=>w,bF:()=>q,P4:()=>Y,VL:()=>S,hJ:()=>B,yR:()=>L,He:()=>I,w7:()=>A,q2:()=>M,UX:()=>H,sq:()=>C,t:()=>D,Nn:()=>V});const t={createGrids:(e,t,n)=>{let l=document.createElement("div");l.style.padding="10px",l.style.border=0===n||0===t?"none":"solid black 2px",l.textContent=n,l.style.textAlign="center",0===n&&"0"===e?l.textContent=t:0===t&&"0"!=e&&(l.textContent=e),l.dataset.hit="No",l.dataset.P1hit="N",l.dataset.P2hit="N",l.dataset.letter=e,l.dataset.number=t,l.classList.add("cell"),l.setAttribute("id",l.dataset.letter+l.dataset.number),document.getElementById("gameboard1").appendChild(l)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function n(e,t,n,l){let o=[];if("V"===l){let l=11-n;t>l&&(t=l);for(let l=1;l<n+1;l++)o.push(e+t++)}else if("H"===l){let l=e.charCodeAt(0),r=75-n;l>r&&(l=r),console.log(l),console.log(r);for(let e=1;e<n+1;e++)o.push(String.fromCharCode(l++)+t)}return o}function l(e,t){let n=e,l=t,o=0;for(let e=0;e<l.length;e++)for(let t=0;t<n.length;t++)for(let r=0;r<n[t].coordinates.length;r++)n[t].coordinates[r]===l[e]&&o++;return o=o>0?"Y":"N",o}function o(e,t){this.name=e,this.coordinates=t,this.hitShip=t=>{if(alert("Struck the "+e+" ship"),"Y"===k&&Y===A[1]){alert("well done computer"),alert(t+" has been hit.");for(let n=0;n<x.length;n++)e===x[n].name&&x[n].coordinates.push(t);0===H&&H++}},this.isSunk=()=>{0===t.length&&alert("Sunk the "+e+" ship")}}let r;const s=e=>{e.target.style.backgroundColor="red";let t,l=e.target.dataset.letter,s=e.target.dataset.number,a=new o("Carrier",n(l,s,2,w));return"0"===s?console.log("Stay in the grid."):(Y===A[0]?(t=S,r="p1c"):Y===A[1]&&(t=L,r="p2c"),t.push(a)),t},a=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Battleship",n(s,a,3,w));return"0"===a?console.log("Stay in the grid."):(Y===A[0]?(t=S,r="p1c"):Y===A[1]&&(t=L,r="p2c"),"Y"===l(t,n(s,a,3,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},i=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Cruiser",n(s,a,4,w));return"0"===a?console.log("Stay in the grid."):(Y===A[0]?(t=S,r="p1c"):Y===A[1]&&(t=L,r="p2c"),"Y"===l(t,n(s,a,4,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},c=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Submarine",n(s,a,5,w));return"0"===a?console.log("Stay in the grid."):(Y===A[0]?(t=S,r="p1c"):Y===A[1]&&(t=L,r="p2c"),"Y"===l(t,n(s,a,5,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},d=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Destroyer",n(s,a,6,w));return"0"===a?console.log("Stay in the grid."):(Y===A[0]?(t=S,r="p1c"):Y===A[1]&&(t=L,r="p2c"),"Y"===l(t,n(s,a,6,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},u=function(e){let t=e.target.dataset.number,n=e.target.dataset.letter,l="blue";if("V"===w){let e=11-C;t>e&&(t=e),l="0"===t?"white":"grey";for(let e=0;e<C;e++)document.getElementById(n+(+t+e)).style.backgroundColor=l}else if("H"===w){let e=n.charCodeAt(0),l=75-C;e>l&&(e=l);for(let n=0;n<C;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.backgroundColor="white";let t=e.target.dataset.number,n=e.target.dataset.letter,l=n+t;if(console.log(l),"V"===w){let e=11-C;t>e&&(t=e);for(let e=0;e<C;e++)document.getElementById(n+(+t+e)).style.backgroundColor="white"}else if("H"===w){let e=n.charCodeAt(0),l=75-C;e>l&&(e=l);for(let n=0;n<C;n++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}},h=function(){let e=B;Y===A[0]?e=B:Y===A[1]&&(e=I);for(let t=0;t<e.length;t++)document.getElementById(e[t]).style.backgroundColor="red"},m=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},y=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},p=function(e){Y===A[0]?b=e.target.dataset.P1hit:Y===A[1]&&(b=e.target.dataset.P2hit),"Y"===b?e.target.style.backgroundColor="red":"N"===b&&(e.target.style.backgroundColor="white")},f=function(){let e=S;Y===A[0]?(e=S,console.log(e)):Y===A[1]&&(e=L,console.log(e));for(let t=0;t<e.length;t++)for(let n=0;n<e[t].coordinates.length;n++)document.getElementById(e[t].coordinates[n]).style.backgroundColor="grey"},v=(()=>{var e=document.getElementById("myModal"),t=document.getElementById("myBtn");let n=document.getElementById("para1"),l=document.getElementById("para2");document.getElementsByClassName("close")[0];let o=document.getElementById("PSbuttons");o.style.display="none";let r=document.getElementById("compHit");function s(){e.style.display="none"}r.style.display="none",t.onclick=function(){e.style.display="None"};let a=document.getElementById("frnd"),i=document.getElementById("comp");return{showModule:function(){e.style.display="block",n.textContent="CHANGE PLACES!",l.textContent="Click button when ready.",o.style.display="none",t.style.display="block"},playerSelect:function(){e.style.display="block",n.textContent="Are you playing with a friend or against our AI?",t.style.display="none",document.querySelector(".close").style.display="none",o.style.display="block",a.addEventListener("click",(()=>{k="N",e.style.display="none"})),i.addEventListener("click",(()=>{k="Y",e.style.display="none"}))},compHitModal:function(){e.style.display="block",n.textContent="Please click the button below to activate the AI choice!",t.style.display="none",r.style.display="block",document.querySelector(".close").style.display="none",o.style.display="none",r.addEventListener("click",q),r.addEventListener("click",s)},closeModal:s}})(),E=(()=>{function e(e,t){return Math.floor(Math.random()*(t-e+1)+e)}return{hit:function(){console.log(H),console.log(x),1===H||2===H||(M=e(0,V.length-1));let t=V[M];return V.splice(M,1),console.log("Random no: "+M),console.log("Length: "+V.length),console.log(V),t},selectCarrier:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Carrier",n(r,s,2,a));"Y"===l(i,n(r,s,2,a))?E.selectCarrier():(i.push(c),E.selectBattleship())},selectBattleship:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Battleship",n(r,s,3,a));"Y"===l(i,n(r,s,3,a))?E.selectBattleship():(i.push(c),E.selectCruiser())},selectCruiser:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Cruiser",n(r,s,4,a));"Y"===l(i,n(r,s,4,a))?E.selectCruiser():(i.push(c),E.selectSubmarine())},selectSubmarine:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Submarine",n(r,s,5,a));"Y"===l(i,n(r,s,5,a))?E.selectSubmarine():(i.push(c),E.selectDestroyer())},selectDestroyer:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Destroyer",n(r,s,6,a));"Y"===l(i,n(r,s,6,a))?E.selectDestroyer():(i.push(c),D())},randomIntFromInterval:e,targetArray:function(){for(let e=65;e<75;e++)for(let t=1;t<3;t++)V.push(String.fromCharCode(e)+t)}}})();let C,b,k="N",S=[],L=[],B=[],I=[],w="V",A=["player1","player2"],Y=A[0],P=S;Y===A[0]?P=S:Y===A[1]&&(P=L),document.getElementById("pip").textContent=Y;let M,V=[],H=0;E.targetArray(),console.log(V);let x=[{name:"Carrier",coordinates:[]},{name:"Battleship",coordinates:[]},{name:"Cruiser",coordinates:[]},{name:"Submarine",coordinates:[]},{name:"Destroyer",coordinates:[]}];document.getElementById("Chnge").addEventListener("click",(()=>{"V"===w?(w="H",document.getElementById("position").textContent="Horizontal"):"H"===w&&(w="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("mouseover",(()=>{m(),f()})),document.getElementById("shwshipos").addEventListener("mouseleave",(()=>{m(),h()}));const G=()=>{let e;e="Y"===k?v.compHitModal():v.showModule(),Y===A[0]?(Y=A[1],P=L,document.getElementById("pip").textContent=Y):Y===A[1]?(Y=A[0],P=S,document.getElementById("pip").textContent=Y):(Y=A[0],P=L,document.getElementById("pip").textContent=Y),m(),h()};function q(e){console.log(e.target.dataset.letter),console.log(Y);let t,n,l,o=S,r=B,s=0;if(console.log(s),"Y"===k&&Y===A[1]?(l=E.hit(),alert("Computer has struck Tile: "+l)):(t=e.target.dataset.letter,n=e.target.dataset.number,l=t+n),console.log(l),console.log(o.length),Y===A[0]?(o=L,r=B,b=e.target.dataset.P1hit):Y===A[1]&&"Y"!=k?(o=S,r=I,b=e.target.dataset.P2hit):Y===A[1]&&"Y"===k&&(o=S,r=I),"0"===n)console.log("Stay in the grid.");else if("Y"===b)console.log("Already been hit, try again.");else{Y===A[0]?(o=L,r=B,b=e.target.dataset.P1hit="Y"):Y===A[1]&&(o=S,r=I,b=e.target.dataset.P2hit="Y");for(let e=0;e<o.length;e++)for(let t=0;t<o[e].coordinates.length;t++)o[e].coordinates[t]===l&&(console.log(o[e].coordinates),o[e].coordinates.splice(t,1),o[e].hitShip(l),o[e].isSunk(),s++,N(),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));r.push(l),console.log("P1 strikes: "+B),console.log("P2 strikes: "+I),"Y"===k&&Y===A[1]&&H>0&&s>0&&H++,G()}}function N(){let e,t=0,n=S;Y===A[0]?(n=L,e="Player One"):Y===A[1]&&(n=S,e="Player Two");for(let e=0;e<n.length;e++)0===n[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function D(){if(P.length>4)if("Y"===k){alert("Computer is choosing battle positions"),C=1;let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";T()}else{C=1,G();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",D),e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";T()}}function T(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",q),e[t].style.backgroundColor="white",e[t].removeEventListener("mouseover",u),e[t].removeEventListener("mouseleave",g),e[t].addEventListener("mouseover",y),e[t].addEventListener("mouseleave",p)}console.log("OIL"),console.log("Nnnnn"),console.log("INRST");const O={p1carrierShip:function(){let e=document.querySelectorAll(".cell");C=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",s),e[t].addEventListener("click",O.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){if(P.length>0){let e=document.querySelectorAll(".cell");C=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",O.p1battleShip),e[t].addEventListener("click",a),e[t].addEventListener("click",O.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1cruiserShip:function(){if(P.length>1){console.log(P);let e=document.querySelectorAll(".cell");C=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",O.p1cruiserShip),e[t].addEventListener("click",i),e[t].addEventListener("click",O.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1submarineShip:function(){if(P.length>2){let e=document.querySelectorAll(".cell");C=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",O.p1submarineShip),e[t].addEventListener("click",c),e[t].addEventListener("click",O.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1destroyerShip:function(){if(P.length>3){let e=document.querySelectorAll(".cell");C=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",O.p1destroyerShip),e[t].addEventListener("click",d),Y===A[1]?e[t].addEventListener("click",D):Y===A[0]&&e[t].addEventListener("click",O.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},loop:function(){if(P.length>4)if("Y"===k){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",O.loop),e[t].style.backgroundColor="white";E.selectCarrier()}else{G();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",O.loop),e[t].style.backgroundColor="white";O.p1carrierShip()}}};v.playerSelect(),t.createGameboard(),O.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,