(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{o7:()=>v,P4:()=>E,VL:()=>p,yR:()=>h,w7:()=>y,sq:()=>m});const t={createGrids:(e,t,r)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===r||0===t?"none":"solid black 2px",n.textContent=r,n.style.textAlign="center",0===r&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.hit,n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function r(e,t,r,n){let l=[];if("V"===n){let n=11-r;t>n&&(t=n);for(let n=1;n<r+1;n++)l.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),o=75-r;n>o&&(n=o),console.log(n),console.log(o);for(let e=1;e<r+1;e++)l.push(String.fromCharCode(n++)+t)}return l}function n(e,t){let r=e,n=t,l=0;for(let e=0;e<n.length;e++)for(let t=0;t<r.length;t++)for(let o=0;o<r[t].coordinates.length;o++)r[t].coordinates[o]===n[e]&&l++;return l=l>0?"Y":"N",l}function l(e,t){this.name=e,this.coordinates=t,this.hitShip=()=>{alert("You struck the "+e+" ship")},this.isSunk=()=>{0===t.length&&alert("You sunk the "+e+" ship")}}let o;const a=e=>{e.target.style.backgroundColor="red";let t,n=e.target.dataset.letter,a=e.target.dataset.number,s=new l("Carrier",r(n,a,2,v));E===y[0]?(t=p,o="p1c"):E===y[1]&&(t=h,o="p2c"),t.push(s);let d=document.createElement("p");return d.textContent="Carrier-"+r(n,a,2,v),document.getElementById(o).appendChild(d),t},s=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,s=e.target.dataset.number,d=new l("Battleship",r(a,s,3,v));if(E===y[0]?(t=p,o="p1c"):E===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,s,3,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(d);let e=document.createElement("p");e.textContent="BattleShip-"+r(a,s,3,v),document.getElementById(o).appendChild(e)}return t},d=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,s=e.target.dataset.number,d=new l("Cruiser",r(a,s,4,v));if(E===y[0]?(t=p,o="p1c"):E===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,s,4,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(d);let e=document.createElement("p");e.textContent="Cruiser-"+r(a,s,4,v),document.getElementById(o).appendChild(e)}return t},i=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,s=e.target.dataset.number,d=new l("Submarine",r(a,s,5,v));if(E===y[0]?(t=p,o="p1c"):E===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,s,5,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(d);let e=document.createElement("p");e.textContent="Submarine-"+r(a,s,5,v),document.getElementById(o).appendChild(e)}return t},c=e=>{e.target.style.backgroundColor="red";let t,a=e.target.dataset.letter,s=e.target.dataset.number,d=new l("Destroyer",r(a,s,6,v));if(E===y[0]?(t=p,o="p1c"):E===y[1]&&(t=h,o="p2c"),"Y"===n(t,r(a,s,6,v)))alert("These tiles have already been assigned, please choose different tiles");else{t.push(d);let e=document.createElement("p");e.textContent="Destroyer-"+r(a,s,6,v),document.getElementById(o).appendChild(e)}return t},u=function(e){e.target.style.backgroundColor="green";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v){let e=11-m;t>e&&(t=e);for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="grey"}else if("H"===v){let e=r.charCodeAt(0),n=75-m;e>n&&(e=n);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.style.backgroundColor="white";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===v){let e=11-m;t>e&&(t=e);for(let e=0;e<m;e++)document.getElementById(r+(+t+e)).style.backgroundColor="white"}else if("H"===v){let e=r.charCodeAt(0),n=75-m;e>n&&(e=n);for(let r=0;r<m;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}};let m,p=[],h=[],v="V",y=["player1","player2"],E=y[0];document.getElementById("pip").textContent=E,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===v?(v="H",document.getElementById("position").textContent="Horizontal"):"H"===v&&(v="V",document.getElementById("position").textContent="Vertical")}));const f=()=>{E===y[0]?(E=y[1],document.getElementById("pip").textContent=E):(y[1],E=y[0],document.getElementById("pip").textContent=E)};function C(e){console.log(e.target.dataset.letter);let t=p,r=e.target.dataset.letter+e.target.dataset.number;console.log(r),console.log(t.length),E===y[0]?t=h:E===y[1]&&(t=p);for(let e=0;e<t.length;e++)for(let n=0;n<t[e].coordinates.length;n++)t[e].coordinates[n]===r&&(console.log(t[e].coordinates),t[e].coordinates.splice(n,1),t[e].hitShip(),t[e].isSunk(),k(),console.log(t[e].coordinates),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));f()}function k(){let e,t=0,r=p;E===y[0]?(r=h,e="Player One"):E===y[1]&&(r=p,e="Player Two");for(let e=0;e<r.length;e++)0===r[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function b(){m=1,f();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",b),e[t].style.backgroundColor="white";!function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",C),e[t].style.backgroundColor="white",e[t].addEventListener("mouseover",(e=>{e.target.style.backgroundColor="red"})),e[t].addEventListener("mouseleave",(e=>{e.target.style.backgroundColor="white"}))}()}const L={p1carrierShip:function(){let e=document.querySelectorAll(".cell");m=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",a),e[t].addEventListener("click",L.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){let e=document.querySelectorAll(".cell");m=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",L.p1battleShip),e[t].addEventListener("click",s),e[t].addEventListener("click",L.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1cruiserShip:function(){let e=document.querySelectorAll(".cell");m=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",L.p1cruiserShip),e[t].addEventListener("click",d),e[t].addEventListener("click",L.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1submarineShip:function(){let e=document.querySelectorAll(".cell");m=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",L.p1submarineShip),e[t].addEventListener("click",i),e[t].addEventListener("click",L.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1destroyerShip:function(){let e=document.querySelectorAll(".cell");m=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",L.p1destroyerShip),e[t].addEventListener("click",c),E===y[1]?e[t].addEventListener("click",b):E===y[0]&&e[t].addEventListener("click",L.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},loop:function(){f();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",L.loop),e[t].style.backgroundColor="white";L.p1carrierShip()}};t.createGameboard(),L.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,