(()=>{"use strict";var e={d:(t,l)=>{for(var n in l)e.o(l,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:l[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{jK:()=>b,zf:()=>k,o7:()=>w,bF:()=>V,P4:()=>P,VL:()=>S,hJ:()=>B,yR:()=>L,He:()=>I,w7:()=>A,sq:()=>C,t:()=>G,Nn:()=>H});const t={createGrids:(e,t,l)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===l||0===t?"none":"solid black 2px",n.textContent=l,n.style.textAlign="center",0===l&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.P1hit="N",n.dataset.P2hit="N",n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function l(e,t,l,n){let o=[];if("V"===n){let n=11-l;t>n&&(t=n);for(let n=1;n<l+1;n++)o.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),r=75-l;n>r&&(n=r),console.log(n),console.log(r);for(let e=1;e<l+1;e++)o.push(String.fromCharCode(n++)+t)}return o}function n(e,t){let l=e,n=t,o=0;for(let e=0;e<n.length;e++)for(let t=0;t<l.length;t++)for(let r=0;r<l[t].coordinates.length;r++)l[t].coordinates[r]===n[e]&&o++;return o=o>0?"Y":"N",o}function o(e,t){this.name=e,this.coordinates=t,this.hitShip=()=>{alert("Struck the "+e+" ship")},this.isSunk=()=>{0===t.length&&alert("Sunk the "+e+" ship")}}let r;const s=e=>{e.target.style.backgroundColor="red";let t,n=e.target.dataset.letter,s=e.target.dataset.number,a=new o("Carrier",l(n,s,2,w));return"0"===s?console.log("Stay in the grid."):(P===A[0]?(t=S,r="p1c"):P===A[1]&&(t=L,r="p2c"),t.push(a)),t},a=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Battleship",l(s,a,3,w));return"0"===a?console.log("Stay in the grid."):(P===A[0]?(t=S,r="p1c"):P===A[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,3,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},i=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Cruiser",l(s,a,4,w));return"0"===a?console.log("Stay in the grid."):(P===A[0]?(t=S,r="p1c"):P===A[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,4,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},c=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Submarine",l(s,a,5,w));return"0"===a?console.log("Stay in the grid."):(P===A[0]?(t=S,r="p1c"):P===A[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,5,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},d=e=>{e.target.style.backgroundColor="red";let t,s=e.target.dataset.letter,a=e.target.dataset.number,i=new o("Destroyer",l(s,a,6,w));return"0"===a?console.log("Stay in the grid."):(P===A[0]?(t=S,r="p1c"):P===A[1]&&(t=L,r="p2c"),"Y"===n(t,l(s,a,6,w))?alert("These tiles have already been assigned, please choose different tiles"):t.push(i)),t},u=function(e){let t=e.target.dataset.number,l=e.target.dataset.letter,n="blue";if("V"===w){let e=11-C;t>e&&(t=e),n="0"===t?"white":"grey";for(let e=0;e<C;e++)document.getElementById(l+(+t+e)).style.backgroundColor=n}else if("H"===w){let e=l.charCodeAt(0),n=75-C;e>n&&(e=n);for(let l=0;l<C;l++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="grey"}},g=function(e){e.target.backgroundColor="white";let t=e.target.dataset.number,l=e.target.dataset.letter,n=l+t;if(console.log(n),"V"===w){let e=11-C;t>e&&(t=e);for(let e=0;e<C;e++)document.getElementById(l+(+t+e)).style.backgroundColor="white"}else if("H"===w){let e=l.charCodeAt(0),n=75-C;e>n&&(e=n);for(let l=0;l<C;l++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}},h=function(){let e=B;P===A[0]?e=B:P===A[1]&&(e=I);for(let t=0;t<e.length;t++)document.getElementById(e[t]).style.backgroundColor="red"},m=function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white"},y=function(e){"0"===e.target.dataset.number?e.target.style.backgroundColor="white":e.target.style.backgroundColor="red"},p=function(e){P===A[0]?b=e.target.dataset.P1hit:P===A[1]&&(b=e.target.dataset.P2hit),"Y"===b?e.target.style.backgroundColor="red":"N"===b&&(e.target.style.backgroundColor="white")},f=function(){let e=S;P===A[0]?(e=S,console.log(e)):P===A[1]&&(e=L,console.log(e));for(let t=0;t<e.length;t++)for(let l=0;l<e[t].coordinates.length;l++)document.getElementById(e[t].coordinates[l]).style.backgroundColor="grey"},v=(()=>{var e=document.getElementById("myModal"),t=document.getElementById("myBtn");let l=document.getElementById("para1"),n=document.getElementById("para2");document.getElementsByClassName("close")[0];let o=document.getElementById("PSbuttons");o.style.display="none";let r=document.getElementById("compHit");function s(){e.style.display="none"}r.style.display="none",t.onclick=function(){e.style.display="None"};let a=document.getElementById("frnd"),i=document.getElementById("comp");return{showModule:function(){e.style.display="block",l.textContent="CHANGE PLACES!",n.textContent="Click button when ready.",o.style.display="none",t.style.display="block"},playerSelect:function(){e.style.display="block",l.textContent="Are you playing with a friend or against our AI?",t.style.display="none",document.querySelector(".close").style.display="none",o.style.display="block",a.addEventListener("click",(()=>{k="N",e.style.display="none"})),i.addEventListener("click",(()=>{k="Y",e.style.display="none"}))},compHitModal:function(){e.style.display="block",l.textContent="Please click the button below to activate the AI choice!",t.style.display="none",r.style.display="block",document.querySelector(".close").style.display="none",o.style.display="none",r.addEventListener("click",V),r.addEventListener("click",s)},closeModal:s}})(),E=(()=>{function e(e,t){return Math.floor(Math.random()*(t-e+1)+e)}return{hit:function(){let t=e(0,H.length),l=H[t];return H.splice(t,1),console.log(H),l},selectCarrier:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Carrier",l(r,s,2,a));"Y"===n(i,l(r,s,2,a))?E.selectCarrier():(i.push(c),E.selectBattleship())},selectBattleship:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Battleship",l(r,s,3,a));"Y"===n(i,l(r,s,3,a))?E.selectBattleship():(i.push(c),E.selectCruiser())},selectCruiser:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Cruiser",l(r,s,4,a));"Y"===n(i,l(r,s,4,a))?E.selectCruiser():(i.push(c),E.selectSubmarine())},selectSubmarine:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Submarine",l(r,s,5,a));"Y"===n(i,l(r,s,5,a))?E.selectSubmarine():(i.push(c),E.selectDestroyer())},selectDestroyer:function(){let t=e(65,74),r=String.fromCharCode(t),s=Math.floor(10*Math.random()+1),a="V";a=1===e(1,2)?"V":"H";let i=L,c=new o("Destroyer",l(r,s,6,a));"Y"===n(i,l(r,s,6,a))?E.selectDestroyer():(i.push(c),G())},randomIntFromInterval:e,targetArray:function(){for(let e=65;e<75;e++)for(let t=1;t<11;t++)H.push(String.fromCharCode(e)+t)}}})();let C,b,k="N",S=[],L=[],B=[],I=[],w="V",A=["player1","player2"],P=A[0],Y=S;P===A[0]?Y=S:P===A[1]&&(Y=L),document.getElementById("pip").textContent=P;let H=[];E.targetArray(),console.log(H),document.getElementById("Chnge").addEventListener("click",(()=>{"V"===w?(w="H",document.getElementById("position").textContent="Horizontal"):"H"===w&&(w="V",document.getElementById("position").textContent="Vertical")})),document.getElementById("shwshipos").addEventListener("mouseover",(()=>{m(),f()})),document.getElementById("shwshipos").addEventListener("mouseleave",(()=>{m(),h()})),console.log("HEYEE");const M=()=>{let e;e="Y"===k?v.compHitModal():v.showModule(),P===A[0]?(P=A[1],Y=L,document.getElementById("pip").textContent=P):P===A[1]?(P=A[0],Y=S,document.getElementById("pip").textContent=P):(P=A[0],Y=L,document.getElementById("pip").textContent=P),m(),h()};function V(e){console.log(e.target.dataset.letter),console.log(P);let t,l,n,o=S,r=B;if("Y"===k&&P===A[1]?(n=E.hit(),alert("Computer has struck Tile: "+n)):(t=e.target.dataset.letter,l=e.target.dataset.number,n=t+l),console.log(n),console.log(o.length),P===A[0]?(o=L,r=B,b=e.target.dataset.P1hit):P===A[1]&&"Y"!=k?(o=S,r=I,b=e.target.dataset.P2hit):P===A[1]&&"Y"===k&&(o=S,r=I),"0"===l)console.log("Stay in the grid.");else if("Y"===b)console.log("Already been hit, try again.");else{P===A[0]?(o=L,r=B,b=e.target.dataset.P1hit="Y"):P===A[1]&&(o=S,r=I,b=e.target.dataset.P2hit="Y");for(let e=0;e<o.length;e++)for(let t=0;t<o[e].coordinates.length;t++)o[e].coordinates[t]===n&&(console.log(o[e].coordinates),o[e].coordinates.splice(t,1),o[e].hitShip(),o[e].isSunk(),x(),console.log("Player one sunk ships: 0"),console.log("Player two sunk ships: 0"));r.push(n),console.log("P1 strikes: "+B),console.log("P2 strikes: "+I),M()}}function x(){let e,t=0,l=S;P===A[0]?(l=L,e="Player One"):P===A[1]&&(l=S,e="Player Two");for(let e=0;e<l.length;e++)0===l[e].coordinates.length&&++t;console.log(t),5===t&&alert(e+" has won!")}function G(){if(Y.length>4)if("Y"===k){alert("Computer is choosing battle positions"),C=1;let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";q()}else{C=1,M();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",G),e[t].style.backgroundColor="white",document.getElementById("ingamebuttons").style.display="block",document.getElementById("positionPara").style.display="none",document.getElementById("Chnge").style.display="none";q()}}function q(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",V),e[t].style.backgroundColor="white",e[t].removeEventListener("mouseover",u),e[t].removeEventListener("mouseleave",g),e[t].addEventListener("mouseover",y),e[t].addEventListener("mouseleave",p)}console.log("OIL"),console.log("Nnnnn"),console.log("INRST");const N={p1carrierShip:function(){let e=document.querySelectorAll(".cell");C=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",s),e[t].addEventListener("click",N.p1battleShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)},p1battleShip:function(){if(Y.length>0){let e=document.querySelectorAll(".cell");C=3;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",s),e[t].removeEventListener("click",N.p1battleShip),e[t].addEventListener("click",a),e[t].addEventListener("click",N.p1cruiserShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1cruiserShip:function(){if(Y.length>1){console.log(Y);let e=document.querySelectorAll(".cell");C=4;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",a),e[t].removeEventListener("click",N.p1cruiserShip),e[t].addEventListener("click",i),e[t].addEventListener("click",N.p1submarineShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1submarineShip:function(){if(Y.length>2){let e=document.querySelectorAll(".cell");C=5;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",i),e[t].removeEventListener("click",N.p1submarineShip),e[t].addEventListener("click",c),e[t].addEventListener("click",N.p1destroyerShip),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},p1destroyerShip:function(){if(Y.length>3){let e=document.querySelectorAll(".cell");C=6;for(let t=0;t<e.length;t++)e[t].removeEventListener("click",c),e[t].removeEventListener("click",N.p1destroyerShip),e[t].addEventListener("click",d),P===A[1]?e[t].addEventListener("click",G):P===A[0]&&e[t].addEventListener("click",N.loop),e[t].addEventListener("mouseover",u),e[t].addEventListener("mouseleave",g)}},loop:function(){if(Y.length>4)if("Y"===k){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",N.loop),e[t].style.backgroundColor="white";E.selectCarrier()}else{M();let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",d),e[t].removeEventListener("click",N.loop),e[t].style.backgroundColor="white";N.p1carrierShip()}}};v.playerSelect(),t.createGameboard(),N.p1carrierShip()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,