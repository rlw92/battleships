(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Rd:()=>g,o7:()=>i,P4:()=>m,VL:()=>d,yR:()=>c,w7:()=>u,sq:()=>s});const t={createGrids:(e,t,r)=>{let n=document.createElement("div");n.style.padding="10px",n.style.border=0===r||0===t?"none":"solid black 2px",n.textContent=r,n.style.textAlign="center",0===r&&"0"===e?n.textContent=t:0===t&&"0"!=e&&(n.textContent=e),n.dataset.hit="No",n.dataset.hit,n.dataset.letter=e,n.dataset.number=t,n.classList.add("cell"),n.setAttribute("id",n.dataset.letter+n.dataset.number),document.getElementById("gameboard1").appendChild(n)},createGameboard:()=>{for(let e=0;e<11;e++)t.createGrids("0",0,e),t.createGrids("A",e),t.createGrids("B",e),t.createGrids("C",e),t.createGrids("D",e),t.createGrids("E",e),t.createGrids("F",e),t.createGrids("G",e),t.createGrids("H",e),t.createGrids("I",e),t.createGrids("J",e)}};function r(e,t,r,n){let o=[];if("V"===n){let n=11-r;t>n&&(t=n);for(let n=1;n<r+1;n++)o.push(e+t++)}else if("H"===n){let n=e.charCodeAt(0),l=107-r;n>l&&(n=l);for(let e=1;e<r+1;e++)o.push(String.fromCharCode(n++)+t)}return o}function n(e,t){this.name=e,this.coordinates=t}const o=e=>{e.target.style.backgroundColor="red";let t,o=new n("Carrier",r(e.target.dataset.letter,e.target.dataset.number,2,i));return m===u[0]?t=d:m===u[1]&&(t=c),t.push(o),document.getElementById("p1c").textContent=t,g(),document.getElementById("p1c").textContent=t[0].name+"-"+t[0].coordinates,t},l=function(e){e.target.style.backgroundColor="green";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===i)for(let e=0;e<s;e++)document.getElementById(r+(+t+e)).style.backgroundColor="green";else if("H"===i){let e=r.charCodeAt(0);for(let r=0;r<s;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="green"}},a=function(e){e.target.style.backgroundColor="white";let t=e.target.dataset.number,r=e.target.dataset.letter;if("V"===i)for(let e=0;e<s;e++)document.getElementById(r+(+t+e)).style.backgroundColor="white";else if("H"===i){let e=r.charCodeAt(0);for(let r=0;r<s;r++)document.getElementById(String.fromCharCode(e++)+t).style.backgroundColor="white"}};let d=[],c=[];document.getElementById("p2c").textContent=c;let s,i="V",u=["player1","player2"],m=u[0];document.getElementById("pip").textContent=m,document.getElementById("Chnge").addEventListener("click",(()=>{"V"===i?(i="H",document.getElementById("position").textContent="Horizontal"):"H"===i&&(i="V",document.getElementById("position").textContent="Vertical")}));const g=()=>{document.getElementById("p2c").textContent=c,m===u[0]?(m=u[1],document.getElementById("pip").textContent=m):(u[1],m=u[0],document.getElementById("pip").textContent=m)};function y(e){let t=d,r=e.target.dataset.letter+e.target.dataset.number;console.log(r),m===u[0]?t=c:m===u[1]&&(t=d);for(let e=0;e<t[0].length;e++)t[0][e]===r&&(alert("HIT"),t[0].splice(e,1),console.log(t[0]),console.log(d[0]),0===d[0].length?alert("Player two wins"):0===c[0].length&&alert("Player one wins"));return g(),t}function C(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)s=2,e[t].removeEventListener("click",o),e[t].removeEventListener("click",C),e[t].addEventListener("click",f)}function f(e){e.target.style.backgroundColor="red";let t=e.target.dataset.letter,n=e.target.dataset.number;c.push(r(t,n,2,i)),document.getElementById("p2c").textContent=c,g(),function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].removeEventListener("click",f),e[t].removeEventListener("mouseover",l),e[t].removeEventListener("mouseleave",a)}(),function(){let e=document.querySelectorAll(".cell");for(let t=0;t<e.length;t++)e[t].addEventListener("click",y),e[t].style.backgroundColor="white",e[t].addEventListener("mouseover",(e=>{e.target.style.backgroundColor="red"})),e[t].addEventListener("mouseleave",(e=>{e.target.style.backgroundColor="white"}))}()}!function(){t.createGameboard();let e=document.querySelectorAll(".cell");s=2;for(let t=0;t<e.length;t++)e[t].addEventListener("click",o),e[t].addEventListener("click",C),e[t].addEventListener("mouseover",l),e[t].addEventListener("mouseleave",a)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,